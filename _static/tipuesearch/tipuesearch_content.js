var tipuesearch_info = 'Generated by gti.py on 2020-07-10 11:37:03.844659';
var tipuesearch = {"pages": [{"title": "SynthPops algorithm \u2014 SynthPops  documentation", "tags": "", "url": "./algorithm.html", "text": "SynthPops algorithm \u00b6 This topic describes the algorithm used by SynthPops to generate the connections between people in each of the contact layers for a given location in the real world. The fundamental algorithm is the same for homes, schools, and workplaces, but with some variations for each. The method draws upon the following previously published models to infer high-resolution age-specific contact patterns in different physical settings and locations: Mossong et al. 2008 Fumanelli et al. 2012 Prem et al. 2017 Mistry et al. 2020 The general idea is to use age-specific contact matrices that describe age mixing patterns for a specific population. By default, SynthPops uses Prem et al.\u2019s (2017) matrices, which project inferred age mixing patterns from the POLYMOD study (Mossong et al. 2008) in Europe to other countries. However, user-specified contact matrices can also be implemented for customizing age mixing patterns for the household, school, and workplace settings (see the social contact data on Zenodo for other empirical contact matrices from survey studies). The matrices represent the average number of contacts between people for different age bins (the default matrices use 5-year age bins). For example, a household of two individuals is relatively unlikely to consist of a 25-year-old and a 15-year-old, so for the 25-29 year age bin in the household layer, there are a low number of expected contacts with the 15-19 year age bin (c.f., Fig. 2c in Prem et al.)."}, {"title": "Index \u2014 SynthPops  documentation", "tags": "", "url": "./genindex.html", "text": "Index A | C | E | G | H | M | N | P | R | S | T | V | W A agent-based model assign_rest_of_workers() (in module synthpops.contact_networks) assign_teachers_to_work() (in module synthpops.contact_networks) assign_uids_by_homes() (in module synthpops.contact_networks) C calc_death() (in module synthpops.sampling) calculate_contact_matrix() (in module synthpops.plot_tools) check_all_residents_are_connected_to_staff() (in module synthpops.long_term_care_facilities) choose_contacts() (in module synthpops.contacts) combine_matrices() (in module synthpops.base) contact layers create_reduced_contacts_with_group_types() (in module synthpops.contacts) custom_generate_all_households() (in module synthpops.long_term_care_facilities) custom_generate_larger_households() (in module synthpops.long_term_care_facilities) custom_resample_age() (in module synthpops.long_term_care_facilities) E edge G generate_all_households() (in module synthpops.contact_networks) generate_household_head_age_by_size() (in module synthpops.contact_networks) generate_household_sizes() (in module synthpops.contact_networks) generate_household_sizes_from_fixed_pop_size() (in module synthpops.contact_networks) generate_larger_households() (in module synthpops.contact_networks) generate_living_alone() (in module synthpops.contact_networks) generate_microstructure_with_facilities() (in module synthpops.long_term_care_facilities) generate_school_sizes() (in module synthpops.contact_networks) generate_synthetic_population() (in module synthpops.contact_networks) generate_synthetic_population_with_workplace_industries() (in module synthpops.contact_networks_industries) generate_usa_workplace_sizes() (in module synthpops.contact_networks) generate_workplace_sizes() (in module synthpops.contact_networks) get_age_bracket_distr_path() (in module synthpops.data_distributions) get_age_brackets_from_df() (in module synthpops.data_distributions) get_age_by_brackets_dic() (in module synthpops.base) get_age_n() (in module synthpops.sampling) get_age_sex() (in module synthpops.sampling) get_age_sex_n() (in module synthpops.sampling) get_aggregate_age_dict_conversion() (in module synthpops.base) get_aggregate_ages() (in module synthpops.base) get_aggregate_matrix() (in module synthpops.base) get_asymmetric_matrix() (in module synthpops.base) get_census_age_brackets() (in module synthpops.data_distributions) get_census_age_brackets_path() (in module synthpops.data_distributions) get_contact_matrix() (in module synthpops.data_distributions) get_contact_matrix_dic() (in module synthpops.data_distributions) get_employment_rates() (in module synthpops.data_distributions) get_employment_rates_path() (in module synthpops.data_distributions) get_establishment_size_brackets_df() (in module synthpops.contact_networks_industries) get_establishments_by_industries_df() (in module synthpops.contact_networks_industries) get_gender_fraction_by_age_path() (in module synthpops.data_distributions) get_head_age_brackets() (in module synthpops.data_distributions) get_head_age_brackets_path() (in module synthpops.data_distributions) get_head_age_by_size_distr() (in module synthpops.data_distributions) get_household_head_age_by_size_df() (in module synthpops.data_distributions) get_household_head_age_by_size_path() (in module synthpops.data_distributions) get_household_size_distr() (in module synthpops.data_distributions) get_household_size_distr_path() (in module synthpops.data_distributions) get_ids_by_age_dic() (in module synthpops.base) get_industry_code() (in module synthpops.contact_networks_industries) get_industry_title() (in module synthpops.contact_networks_industries) get_industry_type_df() (in module synthpops.contact_networks_industries) get_main_industry_code() (in module synthpops.contact_networks_industries) get_main_industry_title() (in module synthpops.contact_networks_industries) get_mortality_rates_by_age() (in module synthpops.sampling) get_mortality_rates_by_age_bracket() (in module synthpops.sampling) get_mortality_rates_filepath() (in module synthpops.sampling) get_n_contact_ids_by_age() (in module synthpops.sampling) get_school_enrollment_rates() (in module synthpops.data_distributions) get_school_enrollment_rates_path() (in module synthpops.data_distributions) get_school_size_brackets() (in module synthpops.data_distributions) get_school_size_brackets_path() (in module synthpops.data_distributions) get_school_size_distr_by_brackets() (in module synthpops.data_distributions) get_school_size_distr_by_brackets_path() (in module synthpops.data_distributions) get_school_sizes_df() (in module synthpops.data_distributions) get_school_sizes_path() (in module synthpops.data_distributions) get_seattle_age_sex() (in module synthpops.sampling) get_seattle_age_sex_n() (in module synthpops.sampling) get_simplified_industry_code() (in module synthpops.contact_networks_industries) get_simplified_industry_title() (in module synthpops.contact_networks_industries) get_simplified_industry_type_df() (in module synthpops.contact_networks_industries) get_state_postal_code() (in module synthpops.data_distributions) get_symmetric_community_matrix() (in module synthpops.base) get_totalpopsize_from_household_sizes() (in module synthpops.contact_networks) get_uids_by_age_dic() (in module synthpops.base) get_uids_in_school() (in module synthpops.contact_networks) get_uids_potential_workers() (in module synthpops.contact_networks) get_usa_age_n() (in module synthpops.sampling) get_usa_age_sex() (in module synthpops.sampling) get_usa_age_sex_n() (in module synthpops.sampling) get_usa_long_term_care_facility_data() (in module synthpops.data_distributions) get_usa_long_term_care_facility_path() (in module synthpops.data_distributions) get_usa_long_term_care_facility_resident_to_staff_ratios_brackets() (in module synthpops.data_distributions) get_usa_long_term_care_facility_resident_to_staff_ratios_brackets_path() (in module synthpops.data_distributions) get_usa_long_term_care_facility_resident_to_staff_ratios_distr() (in module synthpops.data_distributions) get_usa_long_term_care_facility_resident_to_staff_ratios_path() (in module synthpops.data_distributions) get_usa_long_term_care_facility_residents_distr() (in module synthpops.data_distributions) get_usa_long_term_care_facility_residents_distr_brackets() (in module synthpops.data_distributions) get_usa_long_term_care_facility_residents_distr_brackets_path() (in module synthpops.data_distributions) get_usa_long_term_care_facility_residents_path() (in module synthpops.data_distributions) get_usa_school_enrollment_rates_df() (in module synthpops.data_distributions) get_usa_school_sizes_by_bracket() (in module synthpops.data_distributions) get_usa_sex_n() (in module synthpops.sampling) get_workers_by_age_to_assign() (in module synthpops.contact_networks) get_workplace_size_brackets() (in module synthpops.data_distributions) get_workplace_size_brackets_path() (in module synthpops.data_distributions) get_workplace_size_distr_by_brackets() (in module synthpops.data_distributions) get_workplace_size_distr_by_brackets_path() (in module synthpops.data_distributions) H household contact layer M make_contacts() (in module synthpops.contacts) make_contacts_from_microstructure() (in module synthpops.contacts) make_contacts_from_microstructure_objects() (in module synthpops.contacts) make_contacts_generic() (in module synthpops.contacts) make_contacts_with_facilities_from_microstructure() (in module synthpops.contacts) make_contacts_with_facilities_from_microstructure_objects() (in module synthpops.contacts) make_contacts_with_social_layers_152() (in module synthpops.contacts) make_contacts_with_social_layers_and_sex() (in module synthpops.contacts) make_contacts_without_social_layers_152() (in module synthpops.contacts) make_contacts_without_social_layers_and_sex() (in module synthpops.contacts) make_graphs() (in module synthpops.contacts) make_popdict() (in module synthpops.contacts) make_population() (in module synthpops.api) module synthpops synthpops.api synthpops.base synthpops.config synthpops.contact_networks synthpops.contact_networks_industries synthpops.contacts synthpops.data_distributions synthpops.long_term_care_facilities synthpops.plot_tools synthpops.sampling synthpops.version N node norm_age_group() (in module synthpops.base) norm_dic() (in module synthpops.base) P plot_contact_frequency() (in module synthpops.plot_tools) process_usa_school_enrollment_rates() (in module synthpops.data_distributions) pt() (in module synthpops.sampling) R read_age_bracket_distr() (in module synthpops.data_distributions) read_gender_fraction_by_age_bracket() (in module synthpops.data_distributions) read_in_age_by_uid() (in module synthpops.contact_networks) read_setting_groups() (in module synthpops.contact_networks) rehydrate() (in module synthpops.contacts) resample_age() (in module synthpops.sampling) S sample_bracket() (in module synthpops.sampling) sample_contact_age() (in module synthpops.sampling) sample_from_range() (in module synthpops.sampling) sample_n() (in module synthpops.sampling) sample_n_contact_ages() (in module synthpops.sampling) sample_n_contact_ages_with_matrix() (in module synthpops.sampling) sample_single_arr() (in module synthpops.sampling) sample_single_dict() (in module synthpops.sampling) save_synthpop() (in module synthpops.contacts) school contact layer send_students_to_school() (in module synthpops.contact_networks) set_datadir() (in module synthpops.config) set_nbrackets() (in module synthpops.config) set_seed() (in module synthpops.sampling) show_layers() (in module synthpops.contacts) synthpops module synthpops.api module synthpops.base module synthpops.config module synthpops.contact_networks module synthpops.contact_networks_industries module synthpops.contacts module synthpops.data_distributions module synthpops.long_term_care_facilities module synthpops.plot_tools module synthpops.sampling module synthpops.version module T time step trim_contacts() (in module synthpops.contacts) V validate() (in module synthpops.config) W workplace contact layer write_age_by_uid_dic() (in module synthpops.long_term_care_facilities) write_edgelists() (in module synthpops.contacts) write_groups_by_age_and_uid() (in module synthpops.long_term_care_facilities) write_homes_by_age_and_uid() (in module synthpops.contact_networks) write_school_enrollment_rates() (in module synthpops.data_distributions) write_school_size_distr_by_brackets() (in module synthpops.data_distributions) write_schools_by_age_and_uid() (in module synthpops.contact_networks) write_workplaces_by_age_and_uid() (in module synthpops.contact_networks)"}, {"title": "Glossary \u2014 SynthPops  documentation", "tags": "", "url": "./glossary.html", "text": "Glossary \u00b6 contact layers Each of the layers of the population network that is a representation of all of the pairwise connections between people in a given location, such as school, work, or households. node In network theory , the discrete object being represented. In SynthPops, nodes represent people and can have attributes like age assigned. edge In network theory , the interactions between discrete objects. In SynthPops, edges represent interactions between people, with attributes like the setting in which the interactions take place (for example, household, school, or work). The relationship between the interaction setting and properties governing disease transmission, such as frequency of contact and risk associated with each contact, is mapped separately by Covasim or other agent-based model . SynthPops reports whether the edge exists or not. agent-based model A type of simulation that models the actions and interactions of autonomous agents (both individual and collective entities such as organizations or groups). time step A discrete number of hours or days in which the \u201csimulation states\u201d of all \u201csimulation objects\u201d (interventions, infections, immune systems, or individuals) are updated in a simulation. Each time step will complete processing before launching the next one. For example, a time step would process the migration data for populations moving between nodes via rail, airline, and road. The migration of individuals between nodes is the last step of the time step after updating states. household contact layer The layer in the population network that represents all of the pairwise connections between people in households. All people must be part of the household contact layer, though some households may consist of a single person. school contact layer The layer in the population network that represents all of the pairwise connections between people in schools. This includes both students and teachers. The school and workplace contact layers are mutually exclusive, someone cannot be both a student and a worker. workplace contact layer The layer in the population network that represents all of the pairwise connections between people in workplaces excluding teachers in schools. The school and workplace contact layers are mutually exclusive, someone cannot be both a student and a worker."}, {"title": "Household contact layer \u2014 SynthPops  documentation", "tags": "", "url": "./households.html", "text": "Household contact layer \u00b6 The household contact layer represents the pairwise connections between household members. The population is generated within this contact layer, not as a separate pool of people. As locations, households are special in the following ways: Unlike schools and workplaces, everyone must be assigned to a household. The size of the household is important (for example, a 2-person household looks very different in comparison to a 5- or 6-person household) and some households only have 1 person. The reference person/head of the household can be well-defined by data. Data needed \u00b6 The following data sets are required for households: Age bracket distribution specifying the distribution of people in age bins for the location. For example: age_bracket , percent 0_4 , 0.0594714358950416 5_9 , 0.06031137308234759 10_14 , 0.05338015778985113 15_19 , 0.054500690394160285 20_24 , 0.06161403846144956 25_29 , 0.08899312471888453 30_34 , 0.0883533486774803 35_39 , 0.07780767611060545 40_44 , 0.07099017823587304 45_49 , 0.06996903280562596 50_54 , 0.06655242534751997 55_59 , 0.06350008343899961 60_64 , 0.05761405140489549 65_69 , 0.04487122889235999 70_74 , 0.030964420778483555 75_100 , 0.05110673396642193 Age distribution of the reference person for each household size The distribution is what matters, so it doesn\u2019t matter if absolute counts are available or not, each row is normalized. If this is not available, default to sampling the age of the reference individual from the age distribution for adults: family_size , 18 - 20 , 20 - 24 , 25 - 29 , 30 - 34 , 35 - 39 , 40 - 44 , 45 - 49 , 50 - 54 , 55 - 64 , 65 - 74 , 75 - 99 2 , 163 , 999 , 2316 , 2230 , 1880 , 1856 , 2390 , 3118 , 9528 , 9345 , 5584 3 , 115 , 757 , 1545 , 1907 , 2066 , 1811 , 2028 , 2175 , 3311 , 1587 , 588 4 , 135 , 442 , 1029 , 1951 , 2670 , 2547 , 2368 , 1695 , 1763 , 520 , 221 5 , 61 , 172 , 394 , 905 , 1429 , 1232 , 969 , 683 , 623 , 235 , 94 6 , 25 , 81 , 153 , 352 , 511 , 459 , 372 , 280 , 280 , 113 , 49 7 , 24 , 33 , 63 , 144 , 279 , 242 , 219 , 115 , 157 , 80 , 16 Distribution of household sizes : household_size , percent 1 , 0.2781590909877753 2 , 0.3443313103056699 3 , 0.15759535523004006 4 , 0.13654311541644018 5 , 0.050887858718118274 6 , 0.019738368167953997 7 , 0.012744901174002305 Household contact matrix specifying the number/weight of contacts by age bin: 0 - 10 , 10 - 20 , 20 - 30 0 - 10 0.659867911 , 0.503965302 , 0.214772978 10 - 20 0.314776879 , 0.895460015 , 0.412465791 20 - 30 0.132821425 , 0.405073038 , 1.433888594 By default, SynthPops uses matrices from a study ( Prem et al. 2017 ) that projected inferred age mixing patterns from the POLYMOD study ( Mossong et al. 2008 ) in Europe to other countries. SynthPops can take in user-specified contact matrices if other age mixing patterns are available for the household, school, and workplace settings (see the social contact data on Zenodo for other empirical contact matrices from survey studies). In theory, the household contact matrix varies with household size, but in general data at that resolution is unavailable. Workflow \u00b6 Use these SynthPops functions to instantiate households as follows: Call generate_synthetic_population() and provide the binned age bracket distribution data described above. This wrapper function calls the following functions: From the binned age distribution, get_age_n() creates samples of ages from the binned distribution, and then normalizes to create a single-year distribution. This distribution can therefore be gathered using whatever age bins are present in any given dataset. generate_household_sizes_from_fixed_pop_size() generates empty households with known size based on the distribution of household sizes. generate_all_households() contains the core implementation and constructs households with individuals of different ages living together. It takes in the remaining data sources above, and then does the following: Calls generate_living_alone() to populate households with 1 person (either from data on those living alone or, if unavailable, from the adult age distribution). Calls generate_larger_households() repeatedly with with different household sizes to populate those households, first sampling the age of a reference person and then their household contacts as outlined above."}, {"title": "Welcome to SynthPops \u2014 SynthPops  documentation", "tags": "", "url": "./index.html", "text": "Welcome to SynthPops \u00b6 SynthPops is used construct synthetic networks of people that satisfy statistical properties of real-world populations (such as the age distribution, household size, etc.). SynthPops can create generic populations with different network characteristics, as well as synthetic populations that interact in different layers of a multilayer contact network. These synthetic populations can then be used with agent-based models like COVID-19 Agent-based Simulator (Covasim) to simulate epidemics. SynthPops is available on GitHub . For more information on Covasim see Covasim on GitHub . Installation SynthPops overview SynthPops algorithm Using SynthPops Household contact layer School contact layer Workplace contact layer synthpops package Glossary"}, {"title": "Installation \u2014 SynthPops  documentation", "tags": "", "url": "./installation.html", "text": "Installation \u00b6 Follow the instructions below to install SynthPops. Requirements \u00b6 Python 3.6 64-bit. (Note: Python 2 is not supported.) We also recommend, but do not require, using Python virtual environments. For more information, see documentation for venv or Anaconda . Installation \u00b6 Complete the following steps to install SynthPops: Fork and clone the SynthPops GitHub repository . Open a command prompt and navigate to the SynthPops directory. Run the following script: python setup . py develop Note: while synthpops can also be installed via pypi, this method does not currently include the data files which are required to function, and thus is not recommended. Quick start guide \u00b6 The following code creates a synthetic population for Seattle, Washington: import synthpops as sp sp . validate () datadir = sp . datadir # this should be where your demographics data folder resides location = 'seattle_metro' state_location = 'Washington' country_location = 'usa' sheet_name = 'United States of America' level = 'county' npop = 10000 # how many people in your population sp . generate_synthetic_population ( npop , datadir , location = location , state_location = state_location , country_location = country_location , sheet_name = sheet_name , level = level )"}, {"title": "synthpops package \u2014 SynthPops  documentation", "tags": "", "url": "./modules.html", "text": "synthpops package \u00b6 Submodules \u00b6 synthpops.api module \u00b6 This module provides the layer for communicating with the agent-based model Covasim. synthpops.api. make_population ( n = None , max_contacts = None , generate = None , with_industry_code = False , with_facilities = False , use_two_group_reduction = True , average_LTCF_degree = 20 , rand_seed = None ) \u00b6 Make a full population network including both people (ages, sexes) and contacts using Seattle, Washington cached data. Parameters n ( int ) \u2013 The number of people to create. max_contacts ( dict ) \u2013 A dictionary for maximum number of contacts per layer: keys must be \u201cS\u201d (school) and/or \u201cW\u201d (work). generate ( bool ) \u2013 If True, first look for cached population files and if those are not available, generate new population with_industry_code ( bool ) \u2013 If True, assign industry codes for workplaces, currently only possible for cached files of populations in the US with_facilities ( bool ) \u2013 If True, create long term care facilities use_two_group_reduction ( bool ) \u2013 If True, create long term care facilities with reduced contacts across both groups average_LTCF_degree ( int ) \u2013 default average degree in long term care facilities Returns A dictionary of the full population with ages and connections. Return type network (dict) synthpops.base module \u00b6 The module contains frequently-used functions that do not neatly fit into other areas of the code base. synthpops.base. norm_dic ( dic ) \u00b6 Normalize the dictionary dic . Parameters dic ( dict ) \u2013 A dictionary with numerical values. Returns A normalized dictionary. synthpops.base. norm_age_group ( age_dic , age_min , age_max ) \u00b6 Create a normalized dictionary for the range age_min to age_max , inclusive. Parameters age_dic ( dict ) \u2013 A dictionary with numerical values. age_min ( int ) \u2013 The minimum value of the range for the dictionary. age_max ( int ) \u2013 The maximum value of the range for the dictionary. Returns A normalized dictionary for keys in the range age_min to age_max , inclusive. synthpops.base. get_age_by_brackets_dic ( age_brackets ) \u00b6 Create a dictionary mapping age to the age bracket it falls in. Parameters age_brackets ( dict ) \u2013 A dictionary mapping age bracket keys to age bracket range. Returns A dictionary of age bracket by age. Example age_brackets = sp . get_census_age_brackets ( sp . datadir , state_location = 'Washington' , country_location = 'usa' ) age_by_brackets_dic = sp . get_age_by_brackets_dic ( age_brackets ) synthpops.base. get_aggregate_ages ( ages , age_by_brackets_dic ) \u00b6 Create a dictionary of the count of ages by age brackets. Parameters ages ( dict ) \u2013 A dictionary of age count by single year. age_by_brackets_dic ( dict ) \u2013 A dictionary mapping age to the age bracket range it falls within. Returns A dictionary of aggregated age count for specified age brackets. Example aggregate_age_count = sp . get_aggregate_ages ( age_count , age_by_brackets_dic ) aggregate_matrix = symmetric_matrix . copy () aggregate_matrix = sp . get_aggregate_matrix ( aggregate_matrix , age_by_brackets_dic ) synthpops.base. get_aggregate_age_dict_conversion ( larger_aggregate_ages , larger_age_brackets , smaller_age_brackets , age_by_brackets_dic_larger , age_by_brackets_dic_smaller ) \u00b6 Convert the aggregate age count in larger_aggregate_ages from a larger number of age brackets to a smaller number of age brackets. Parameters larger_aggregate_ages ( dict ) \u2013 A dictionary of aggregated age count. larger_age_brackets ( dict ) \u2013 A dictionary of age brackets. smaller_age_brackets ( dict ) \u2013 A dictionary of fewer age brackets. age_by_brackets_dic_larger ( dict ) \u2013 A dictionary mapping age to the larger number of age brackets. age_by_brackets_dic_smaller ( dict ) \u2013 A dictionary mapping age to the smaller number of age brackets. Returns A dictionary of the aggregated age count for the smaller number of age brackets. synthpops.base. get_aggregate_matrix ( M , age_by_brackets_dic ) \u00b6 Aggregate a symmetric matrix to fewer age brackets. Do not use for homogeneous mixing matrix. Parameters M ( np.ndarray ) \u2013 A symmetric age contact matrix. age_by_brackets_dic ( dict ) \u2013 A dictionary mapping age to the age bracket range it falls within. Returns A symmetric contact matrix ( np.ndarray ) aggregated to age brackets. Example age_brackets = sp . get_census_age_brackets ( sp . datadir , state_location = 'Washington' , country_location = 'usa' ) age_by_brackets_dic = sp . get_age_by_brackets_dic ( age_brackets ) aggregate_age_count = sp . get_aggregate_ages ( age_count , age_by_brackets_dic ) aggregate_matrix = symmetric_matrix . copy () aggregate_matrix = sp . get_aggregate_matrix ( aggregate_matrix , age_by_brackets_dic ) asymmetric_matrix = sp . get_asymmetric_matrix ( aggregate_matrix , aggregate_age_count ) synthpops.base. get_asymmetric_matrix ( symmetric_matrix , aggregate_ages ) \u00b6 Get the contact matrix for the average individual in each age bracket. Parameters symmetric_matrix ( np.ndarray ) \u2013 A symmetric age contact matrix. aggregate_ages ( dict ) \u2013 A dictionary mapping single year ages to age brackets. Returns A contact matrix ( np.ndarray ) whose elements M_ij describe the contact frequency for the average individual in age bracket i with all possible contacts in age bracket j . Example age_brackets = sp . get_census_age_brackets ( sp . datadir , state_location = 'Washington' , country_location = 'usa' ) age_by_brackets_dic = sp . get_age_by_brackets_dic ( age_brackets ) aggregate_age_count = sp . get_aggregate_ages ( age_count , age_by_brackets_dic ) aggregate_matrix = symmetric_matrix . copy () aggregate_matrix = sp . get_aggregate_matrix ( aggregate_matrix , age_by_brackets_dic ) asymmetric_matrix = sp . get_asymmetric_matrix ( aggregate_matrix , aggregate_age_count ) synthpops.base. get_symmetric_community_matrix ( ages ) \u00b6 Get a symmetric homogeneous matrix. Parameters ages ( dict ) \u2013 A dictionary with the count of each single year age. Returns A symmetric homogeneous matrix for age count in ages. synthpops.base. combine_matrices ( matrix_dic , weights_dic , num_agebrackets ) \u00b6 Combine different contact matrices into a single contact matrix. Parameters matrix_dic ( dict ) \u2013 A dictionary of different contact matrices by setting. weights_dic ( dict ) \u2013 A dictionary of weights for each setting. num_agebrackets ( int ) \u2013 The number of age brackets for the different matrices. Returns A contact matrix ( np.ndarray ) that is a linear combination of setting specific matrices given weights for each setting. synthpops.base. get_ids_by_age_dic ( age_by_id_dic ) \u00b6 Get lists of IDs that map to each age. Parameters age_by_id_dic ( dict ) \u2013 A dictionary with the age of each individual by their ID. Returns A dictionary listing IDs for each age from a dictionary that maps ID to age. synthpops.base. get_uids_by_age_dic ( popdict ) \u00b6 Get lists of UIDs that map to each age. Parameters popdict ( sc.dict ) \u2013 A dictionary mapping an individual\u2019s ID to a dictionary with their age and other attributes. Returns A dictionary listing UIDs for each age. synthpops.config module \u00b6 This module sets the location of the data folder. synthpops.config. set_datadir ( folder ) \u00b6 Set the data folder to the user-specified location \u2013 note, mostly deprecated. synthpops.config. set_nbrackets ( n ) \u00b6 Set the number of census brackets \u2013 usually 16 or 20. synthpops.config. validate ( verbose = True ) \u00b6 Check that the data folder can be found. synthpops.contact_networks module \u00b6 This module generates the household, school, and workplace contact networks. synthpops.contact_networks. generate_household_sizes ( Nhomes , hh_size_distr ) \u00b6 Given a number of homes and a household size distribution, generate the number of homes of each size. Parameters Nhomes ( int ) \u2013 The number of homes. hh_size_distr ( dict ) \u2013 The distribution of household sizes. Returns An array with the count of households of size s at index s-1. synthpops.contact_networks. generate_household_sizes_from_fixed_pop_size ( N , hh_size_distr ) \u00b6 Given a number of people and a household size distribution, generate the number of homes of each size needed to place everyone in a household. Parameters N ( int ) \u2013 The number of people in the population. hh_size_distr ( dict ) \u2013 The distribution of household sizes. Returns An array with the count of households of size s at index s-1. synthpops.contact_networks. get_totalpopsize_from_household_sizes ( hh_sizes ) \u00b6 Sum the population of a specific household size from the count array. Parameters hh_sizes ( array ) \u2013 The count of household size s at index s-1. Returns An integer indicating the total number of people in household size s. synthpops.contact_networks. generate_household_head_age_by_size ( hha_by_size_counts , hha_brackets , hh_size , single_year_age_distr ) \u00b6 Generate the age of the head of the household, also known as the reference person of the household, conditional on the size of the household. Parameters hha_by_size_counts ( matrix ) \u2013 A matrix in which each row contains the age distribution of the reference person for household size s at index s-1. hha_brackets ( dict ) \u2013 The age brackets for the heads of household. hh_size ( int ) \u2013 The household size. single_year_age_distr ( dict ) \u2013 The age distribution. Returns Age of the head of the household or reference person. synthpops.contact_networks. generate_living_alone ( hh_sizes , hha_by_size_counts , hha_brackets , single_year_age_distr ) \u00b6 Generate the ages of those living alone. Parameters hh_sizes ( array ) \u2013 The count of household size s at index s-1. hha_by_size_counts ( matrix ) \u2013 A matrix in which each row contains the age distribution of the reference person for household size s at index s-1. hha_brackets ( dict ) \u2013 The age brackets for the heads of household. single_year_age_distr ( dict ) \u2013 The age distribution. Returns An array of households of size 1 where each household is a row and the value in the row is the age of the household member. synthpops.contact_networks. generate_larger_households ( size , hh_sizes , hha_by_size_counts , hha_brackets , age_brackets , age_by_brackets_dic , contact_matrix_dic , single_year_age_distr ) \u00b6 Generate ages of those living in households of greater than one individual. Reference individual is sampled conditional on the household size. All other household members have their ages sampled conditional on the reference person\u2019s age and the age mixing contact matrix in households for the population under study. Parameters size ( int ) \u2013 The household size. hh_sizes ( array ) \u2013 The count of household size s at index s-1. hha_by_size_counts ( matrix ) \u2013 A matrix in which each row contains the age distribution of the reference person for household size s at index s-1. hha_brackets ( dict ) \u2013 The age brackets for the heads of household. age_brackets ( dict ) \u2013 A dictionary mapping age bracket keys to age bracket range. age_by_brackets_dic ( dict ) \u2013 A dictionary mapping age to the age bracket range it falls within. contact_matrix_dic ( dict ) \u2013 A dictionary of the age-specific contact matrix for different physical contact settings. single_year_age_distr ( dict ) \u2013 The age distribution. Returns An array of households for size size where each household is a row and the values in the row are the ages of the household members. The first age in the row is the age of the reference individual. synthpops.contact_networks. generate_all_households ( N , hh_sizes , hha_by_size_counts , hha_brackets , age_brackets , age_by_brackets_dic , contact_matrix_dic , single_year_age_distr ) \u00b6 Generate the ages of those living in households together. First create households of people living alone, then larger households. For households larger than 1, a reference individual\u2019s age is sampled conditional on the household size, while all other household members have their ages sampled conditional on the reference person\u2019s age and the age mixing contact matrix in households for the population under study. Parameters N ( int ) \u2013 The number of people in the population. hh_sizes ( array ) \u2013 The count of household size s at index s-1. hha_by_size_counts ( matrix ) \u2013 A matrix in which each row contains the age distribution of the reference person for household size s at index s-1. hha_brackets ( dict ) \u2013 The age brackets for the heads of household. age_brackets ( dict ) \u2013 The dictionary mapping age bracket keys to age bracket range. age_by_brackets_dic ( dict ) \u2013 The dictionary mapping age to the age bracket range it falls within. contact_matrix_dic ( dict ) \u2013 The dictionary of the age-specific contact matrix for different physical contact settings. single_year_age_distr ( dict ) \u2013 The age distribution. Returns An array of all households where each household is a row and the values in the row are the ages of the household members. The first age in the row is the age of the reference individual. Households are randomly shuffled by size. synthpops.contact_networks. assign_uids_by_homes ( homes , id_len = 16 , use_int = True ) \u00b6 Assign IDs to everyone in order by their households. Parameters homes ( array ) \u2013 The generated synthetic ages of household members. id_len ( int ) \u2013 The length of the UID. Returns A copy of the generated households with IDs in place of ages, and a dictionary mapping ID to age. synthpops.contact_networks. write_homes_by_age_and_uid ( datadir , location , state_location , country_location , homes_by_uids , age_by_uid_dic ) \u00b6 Write the households to file with both ID and their ages, while also writing the dictionary of ID mapping to age for each individual in the population. Parameters datadir ( string ) \u2013 The file path to the data directory. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. homes_by_uids ( list ) \u2013 The list of lists, where each sublist represents a household and the IDs of the household members. age_by_uid_dic ( dict ) \u2013 A dictionary mapping ID to age for each individual in the population. Returns None synthpops.contact_networks. read_in_age_by_uid ( datadir , location , state_location , country_location , N ) \u00b6 Read dictionary of ID mapping to ages for all individuals from file. Parameters datadir ( string ) \u2013 The file path to the data directory. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. N ( int ) \u2013 The number of people in the population. Returns A dictionary mapping ID to age for all individuals in the population. synthpops.contact_networks. read_setting_groups ( datadir , location , state_location , country_location , n , setting , with_ages = False ) \u00b6 Read in groups of people interacting in different social settings from file. Parameters datadir ( string ) \u2013 The file path to the data directory. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. n ( int ) \u2013 The number of people in the population. setting ( string ) \u2013 The name of the physical contact setting: H for households, S for schools, W for workplaces, C for community or other. with_ages ( bool ) \u2013 If True, read in the ages of each individual in the group; otherwise, read in their IDs. Returns A list of lists where each sublist represents of group of individuals in the same group and thus are contacts of each other. synthpops.contact_networks. get_uids_in_school ( datadir , n , location , state_location , country_location , age_by_uid_dic = None , homes_by_uids = None , use_default = False ) \u00b6 Identify who in the population is attending school based on enrollment rates by age. Parameters datadir ( string ) \u2013 The file path to the data directory. n ( int ) \u2013 The number of people in the population. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. age_by_uid_dic ( dict ) \u2013 A dictionary mapping ID to age for all individuals in the population. homes_by_uids ( list ) \u2013 A list of lists where each sublist is a household and the IDs of the household members. use_default ( bool ) \u2013 If True, try to first use the other parameters to find data specific to the location under study; otherwise, return default data drawing from Seattle, Washington. Returns A dictionary of students in schools mapping their ID to their age, a dictionary of students in school mapping age to the list of IDs with that age, and a dictionary mapping age to the number of students with that age. synthpops.contact_networks. generate_school_sizes ( school_size_distr_by_bracket , school_size_brackets , uids_in_school ) \u00b6 Given a number of students in school, generate a list of school sizes to place everyone in a school. Parameters school_size_distr_by_bracket ( dict ) \u2013 The distribution of binned school sizes. school_size_brackets ( dict ) \u2013 A dictionary of school size brackets. uids_in_school ( dict ) \u2013 A dictionary of students in school mapping ID to age. Returns A list of school sizes whose sum is the length of uids_in_school . synthpops.contact_networks. send_students_to_school ( school_sizes , uids_in_school , uids_in_school_by_age , ages_in_school_count , age_brackets , age_by_brackets_dic , contact_matrix_dic , verbose = False ) \u00b6 A method to send students to school together. Using the matrices to construct schools is not a perfect method so some things are more forced than the matrix method alone would create. Parameters school_sizes ( list ) \u2013 A list of school sizes. uids_in_school ( dict ) \u2013 A dictionary of students in school mapping ID to age. uids_in_school_by_age ( dict ) \u2013 A dictionary of students in school mapping age to the list of IDs with that age. ages_in_school_count ( dict ) \u2013 A dictionary mapping age to the number of students with that age. age_brackets ( dict ) \u2013 A dictionary mapping age bracket keys to age bracket range. age_by_brackets_dic ( dict ) \u2013 A dictionary mapping age to the age bracket range it falls within. contact_matrix_dic ( dict ) \u2013 A dictionary of age specific contact matrix for different physical contact settings. verbose ( bool ) \u2013 If True, print statements about the generated schools as they\u2019re being generated. Returns Two lists of lists, the first where each sublist is the ages of students in the same school, and the second is the same list but with the IDs of each student in place of their age. synthpops.contact_networks. get_uids_potential_workers ( syn_school_uids , employment_rates , age_by_uid_dic ) \u00b6 Get IDs for everyone who could be a worker by removing those who are students and those who can\u2019t be employed officially. Parameters syn_school_uids ( list ) \u2013 A list of lists where each sublist represents a school with the IDs of students in the school. employment_rates ( dict ) \u2013 The employment rates by age. age_by_uid_dic ( dict ) \u2013 A dictionary mapping ID to age for individuals in the population. Returns A dictionary of potential workers mapping their ID to their age, a dictionary mapping age to the list of IDs for potential workers with that age, and a dictionary mapping age to the count of potential workers left to assign to a workplace for that age. synthpops.contact_networks. generate_workplace_sizes ( workplace_size_distr_by_bracket , workplace_size_brackets , workers_by_age_to_assign_count ) \u00b6 Given a number of individuals employed, generate a list of workplace sizes to place everyone in a workplace. Parameters workplace_size_distr_by_bracket ( dict ) \u2013 The distribution of binned workplace sizes. worplace_size_brackets ( dict ) \u2013 A dictionary of workplace size brackets. workers_by_age_to_assign_count ( dict ) \u2013 A dictionary mapping age to the count of employed individuals of that age. Returns A list of workplace sizes. synthpops.contact_networks. generate_usa_workplace_sizes ( workplace_sizes_by_bracket , workplace_size_brackets , workers_by_age_to_assign_count ) \u00b6 Given a number of individuals employed, generate a list of workplace sizes to place everyone in a workplace. Specific to data from the US. Parameters workplace_sizes_by_bracket ( dict ) \u2013 The distribution of binned workplace sizes. worplace_size_brackets ( dict ) \u2013 A dictionary of workplace size brackets. workers_by_age_to_assign_count ( dict ) \u2013 A dictionary mapping age to the count of employed individuals of that age. Returns A list of workplace sizes. synthpops.contact_networks. get_workers_by_age_to_assign ( employment_rates , potential_worker_ages_left_count , uids_by_age_dic ) \u00b6 Get the number of people to assign to a workplace by age using those left who can potentially go to work and employment rates by age. Parameters employment_rates ( dict ) \u2013 A dictionary of employment rates by age. potential_worker_ages_left_count ( dict ) \u2013 A dictionary of the count of workers to assign by age. uids_by_age_dic ( dict ) \u2013 A dictionary mapping age to the list of ids with that age. Returns A dictionary with a count of workers to assign to a workplace. synthpops.contact_networks. assign_teachers_to_work ( syn_schools , syn_school_uids , employment_rates , workers_by_age_to_assign_count , potential_worker_uids , potential_worker_uids_by_age , potential_worker_ages_left_count , student_teacher_ratio = 30 , teacher_age_min = 25 , teacher_age_max = 75 , verbose = False ) \u00b6 Assign teachers to each school according to the average student-teacher ratio. Parameters syn_schools ( list ) \u2013 list of lists where each sublist is a school with the ages of the students within syn_school_uids ( list ) \u2013 list of lists where each sublist is a school with the ids of the students within employment_rates ( dict ) \u2013 employment rates by age workers_by_age_to_assign_count ( dict ) \u2013 dictionary of the count of workers left to assign by age potential_worker_uids ( dict ) \u2013 dictionary of potential workers mapping their id to their age potential_worker_uids_by_age ( dict ) \u2013 dictionary mapping age to the list of worker ids with that age potential_worker_ages_left_count ( dict ) \u2013 dictionary of the count of potential workers left that can be assigned by age student_teacher_ratio ( int ) \u2013 average student teacher ratio teacher_age_min ( int ) \u2013 minimum age for teachers - should be location specific teacher_age_max ( int ) \u2013 maximum age for teachers - should be location specific verbose ( bool ) \u2013 If True, print statements about the generated schools as teachers are being added to each school. Returns List of lists of schools with the ages of individuals in each, lists of lists of schools with the ids of individuals in each, dictionary of potential workers mapping id to their age, dictionary mapping age to the list of potential workers of that age, dictionary with the count of workers left to assign for each age after teachers have been assigned. synthpops.contact_networks. assign_rest_of_workers ( workplace_sizes , potential_worker_uids , potential_worker_uids_by_age , workers_by_age_to_assign_count , age_by_uid_dic , age_brackets , age_by_brackets_dic , contact_matrix_dic , verbose = False ) \u00b6 Assign the rest of the workers to non-school workplaces. Parameters workplace_sizes ( list ) \u2013 list of workplace sizes potential_worker_uids ( dict ) \u2013 dictionary of potential workers mapping their id to their age potential_worker_uids_by_age ( dict ) \u2013 dictionary mapping age to the list of worker ids with that age workers_by_age_to_assign_count ( dict ) \u2013 dictionary of the count of workers left to assign by age age_by_uid_dic ( dict ) \u2013 dictionary mapping id to age for all individuals in the population age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_by_brackets_dic ( dict ) \u2013 dictionary mapping age to the age bracket range it falls in contact_matrix_dic ( dict ) \u2013 dictionary of age specific contact matrix for different physical contact settings verbose ( bool ) \u2013 If True, print statements about the generated schools as teachers are being added to each school. Returns List of lists where each sublist is a workplace with the ages of workers, list of lists where each sublist is a workplace with the ids of workers, dictionary of potential workers left mapping id to age, dictionary mapping age to a list of potential workers left of that age, dictionary mapping age to the count of workers left to assign. synthpops.contact_networks. write_schools_by_age_and_uid ( datadir , location , state_location , country_location , n , schools_by_uids , age_by_uid_dic ) \u00b6 Write the schools to file with both id and their ages. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in schools_by_uids ( list ) \u2013 list of lists, where each sublist represents a school and the ids of the students and teachers within it age_by_uid_dic ( dict ) \u2013 dictionary mapping id to age for each individual in the population Returns None synthpops.contact_networks. write_workplaces_by_age_and_uid ( datadir , location , state_location , country_location , n , workplaces_by_uids , age_by_uid_dic ) \u00b6 Write the workplaces to file with both id and their ages. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in workplaces_by_uids ( list ) \u2013 list of lists, where each sublist represents a workplace and the ids of the workers within it age_by_uid_dic ( dict ) \u2013 dictionary mapping id to age for each individual in the population Returns None synthpops.contact_networks. generate_synthetic_population ( n , datadir , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' , sheet_name = 'United States of America' , school_enrollment_counts_available = False , verbose = False , plot = False , write = False , return_popdict = False , use_default = False ) \u00b6 Wrapper function that calls other functions to generate a full population with their contacts in the household, school, and workplace layers, and then writes this population to appropriate files. Parameters n ( int ) \u2013 The number of people in the population. datadir ( string ) \u2013 The file path to the data directory. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. sheet_name ( string ) \u2013 The name of the sheet in the Excel file with contact patterns. school_enrollment_counts_available ( bool ) \u2013 If True, a list of school sizes is available and a count of the sizes can be constructed. verbose ( bool ) \u2013 If True, print statements as contacts are being generated. plot ( bool ) \u2013 If True, plot and show a comparison of the generated age distribution in households vs. the expected age distribution of the population from census data being sampled. write ( bool ) \u2013 If True, write population to file. return_popdict ( bool ) \u2013 If True, returns a dictionary of individuals in the population use_default ( bool ) \u2013 If True, try to first use the other parameters to find data specific to the location under study; otherwise, return default data drawing from Seattle, Washington. Returns If return_popdict is True, returns popdict, a dictionary of people with attributes. Dictionary keys are the IDs of individuals in the population and the values are a dictionary for each individual with their attributes, such as age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and the IDs of their contacts in different layers. Different layers available are households (\u2018H\u2019), schools (\u2018S\u2019), and workplaces (\u2018W\u2019). Contacts in these layers are clustered and thus form a network composed of groups of people interacting with each other. For example, all household members are contacts of each other, and everyone in the same school is a contact of each other. Else, return None. Example datadir = sp . datadir # point datadir where your data folder lives location = 'seattle_metro' state_location = 'Washington' country_location = 'usa' sheet_name = 'United States of America' n = 10000 verbose = False plot = False # this will generate a population with microstructure and age demographics that # approximate those of the location selected # also saves to file in: # datadir/demographics/contact_matrices_152_countries/state_location/ sp . generate_synthetic_population ( n , datadir , location = location , state_location = state_location , country_location = country_location , sheet_name = sheet_name , verbose = verbose , plot = plot ) synthpops.contact_networks_industries module \u00b6 synthpops.contact_networks_industries. get_establishments_by_industries_df ( datadir , locations , state_location , country_location , level ) \u00b6 Filter pandas dataframe on establishment sizes by industry for the locations of interest. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in level ( string ) \u2013 scale of region at which data is available Returns A pandas dataframe with necessary columns to calculate establishment sizes by industry for the specified locations of interest. synthpops.contact_networks_industries. get_industry_type_df ( datadir , country_location ) \u00b6 Get 2017 NAICS US Codes and Titles Parameters datadir ( string ) \u2013 file path to the data directory country_location ( string ) \u2013 name of the country Returns A pandas dataframe with 2017 NAICS US Code and Title. synthpops.contact_networks_industries. get_simplified_industry_type_df ( datadir , country_location ) \u00b6 Get simplified 2017 NAICS US Codes. Parameters datadir ( string ) \u2013 file path to the data directory country_location ( string ) \u2013 name of the country Returns A pandas dataframe with 2 digit 2017 NAICS US Codes mapping to main industry types synthpops.contact_networks_industries. get_industry_code ( industry_type_df , industry_title ) \u00b6 Get 2017 NAICS Code based on industry title. Parameters industry_type_df ( dataframe ) \u2013 pandas dataframe industry_title ( string ) \u2013 2017 NAICS US Title Returns 2017 NAICS US Code as an integer synthpops.contact_networks_industries. get_main_industry_code ( industry_type_df , industry_title ) \u00b6 Get 2 digit 2017 NAICS US Code based on industry title. Parameters industry_type_df ( dataframe ) \u2013 pandas dataframe industry_title ( string ) \u2013 2017 NAICS US Title Returns 2 digit 2017 NAICS US Code as an integer. synthpops.contact_networks_industries. get_industry_title ( industry_type_df , industry_code ) \u00b6 Get 2017 NAICS US Title based on full industry code. Parameters industry_type_df ( dataframe ) \u2013 pandas dataframe industry_code ( int ) \u2013 2017 NAICS US Code Returns 2017 NAICS US Title synthpops.contact_networks_industries. get_main_industry_title ( industry_type_df , industry_code ) \u00b6 Get main 2017 NAICS US Title based on 2 digit industry code. Parameters industry_type_df ( dataframe ) \u2013 pandas dataframe industry_code ( int ) \u2013 2 digit 2017 NAICS US Code Returns 2017 NAICS US Title synthpops.contact_networks_industries. get_simplified_industry_title ( simplified_industry_type_df , industry_code ) \u00b6 Get simplified 2017 NAICS US Title from 2 digit 2017 NAICS Code Parameters simplified_industry_type_df ( dataframe ) \u2013 pandas dataframe industry_code ( int ) \u2013 2 digit 2017 NAICS US Code Returns 2017 NAICS US Title for 2 digit code synthpops.contact_networks_industries. get_simplified_industry_code ( simplified_industry_type_df , industry_title ) \u00b6 Get simplified 2017 NAICS US Code from full title Parameters simplified_industry_type_df ( dataframe ) \u2013 pandas dataframe industry_title ( string ) \u2013 full 2017 NAICS US Title Returns 2 digit 2017 NAICS US Code synthpops.contact_networks_industries. get_establishment_size_brackets_df ( datadir , locations , state_location = 'Washington' , country_location = 'usa' , level = 'county' ) \u00b6 Get size brackets dataframe from BLS 2017 Data. Args: Returns Dataframe of size brackets for establishments in the United States. synthpops.contact_networks_industries. generate_synthetic_population_with_workplace_industries ( n , datadir , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' , sheet_name = 'United States of America' , level = 'county' , verbose = False , plot = False ) \u00b6 synthpops.contacts module \u00b6 Generate contacts between people in the population, with many options possible synthpops.contacts. make_popdict ( n = None , uids = None , ages = None , sexes = None , location = None , state_location = None , country_location = None , use_demography = False , id_len = 6 ) \u00b6 Create a dictionary of n people with age, sex and loc keys Parameters n ( int ) \u2013 number of people uids ( list ) \u2013 supplied uids of individuals ages ( list ) \u2013 supplied ages of individuals sexes ( list ) \u2013 supplied sexes of individuals location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in use_demography ( bool ) \u2013 If True, use demographic data id_len ( int ) \u2013 length of the uid Returns A dictionary where keys are the uid of each person and the values are another dictionary containing values for other attributes of the person synthpops.contacts. make_contacts_generic ( popdict , network_distr_args ) \u00b6 Create contact network regardless of age, according to network distribution properties. Can be used by webapp. Parameters popdict ( dict ) \u2013 dictionary of all individuals network_distr_args ( dict ) \u2013 network distribution parameters dictionary for average_degree, network_type, and directionality Returns A dictionary of individuals with contacts drawn from given network distribution parameters. synthpops.contacts. make_contacts_without_social_layers_152 ( popdict , n_contacts_dic , location , state_location , country_location , sheet_name , network_distr_args ) \u00b6 Create contact network according to overall age-mixing contact matrices. Does not capture clustering or microstructure, therefore exact households, schools, or workplaces are not created. However, this does separate agents according to their age and gives them contacts likely for their age. For all ages, the average number of contacts is constant with this method, although location specific data may prove this to not be true. Parameters popdict ( dict ) \u2013 dictionary of all individuals n_contacts_dic ( dict ) \u2013 number of contacts to draw on average by setting location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns network_distr_args ( dict ) \u2013 network distribution parameters dictionary for average_degree, network_type, and directionality, can also include powerlaw exponents, block sizes (re: SBMs), clustering distribution, or other properties needed to generate network structures. Checkout https://networkx.github.io/documentation/stable/reference/generators.html#module-networkx.generators for what\u2019s possible Default \u2018network_type\u2019 is \u2018poisson_degree\u2019 for Erdos-Renyi random graphs in large n limit. Returns A dictionary of individuals with attributes, including their age and the ids of their contacts drawn from given network distribution parameters and the ages of contacts drawn according to overall age mixing data. A single social setting or layer of contacts. synthpops.contacts. make_contacts_with_social_layers_152 ( popdict , n_contacts_dic , location , state_location , country_location , sheet_name , activity_args , network_distr_args ) \u00b6 Create contact network according to overall age-mixing contact matrices. Does not capture clustering or microstructure, therefore exact households, schools, or workplaces are not created. However, this does separate agents according to their age and gives them contacts likely for their age specified by the social settings they are likely to participate in. For all ages, the average number of contacts is constant with this method, although location specific data very wel may prove this to not be true. In general, college students may also be workers, however here they are only students and we assume that any of their contacts in the work environment are likely to look like their contacts at school. Essentially recreates an age-specific compartmental model\u2019s concept of contacts but for an agent based modeling framework. Parameters popdict ( dict ) \u2013 dictionary of all individuals n_contacts_dic ( dict ) \u2013 number of contacts to draw on average by setting location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns activity_args ( dict ) \u2013 dictionary of age bounds for participating in different activities like going to school or working, also student-teacher ratio network_distr_args ( dict ) \u2013 network distribution parameters dictionary for average_degree, network_type, and directionality, can also include powerlaw exponents, block sizes (re: SBMs), clustering distribution, or other properties needed to generate network structures. Checkout https://networkx.github.io/documentation/stable/reference/generators.html#module-networkx.generators for what\u2019s possible Default \u2018network_type\u2019 is \u2018poisson_degree\u2019 for Erdos-Renyi random graphs in large n limit. Returns A dictionary of individuals with contacts with attributes, including their age and the ids of their contacts drawn from given network distribution parameters and the ages of contacts drawn according to age mixing data. Multiple social settings or layers so contacts are listed for different layers. synthpops.contacts. make_contacts_without_social_layers_and_sex ( popdict , n_contacts_dic , location , state_location , country_location , sheet_name , network_distr_args ) \u00b6 Create contact network according to overall age-mixing contact matrices for the US. Does not capture clustering or microstructure, therefore exact households, schools, or workplaces are not created. However, this does separate agents according to their age and gives them contacts likely for their age. For all ages, the average number of contacts is constant, although location specific data may prove this to not be true. Individuals also have a sex, though this in general does not have an impact on their contact patterns. Parameters popdict ( dict ) \u2013 dictionary of all individuals n_contacts_dic ( dict ) \u2013 number of contacts to draw on average by setting location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns network_distr_args ( dict ) \u2013 network distribution parameters dictionary for average_degree, network_type, and directionality, can also include powerlaw exponents, block sizes (re: SBMs), clustering distribution, or other properties needed to generate network structures. Checkout https://networkx.github.io/documentation/stable/reference/generators.html#module-networkx.generators for what\u2019s possible Default \u2018network_type\u2019 is \u2018poisson_degree\u2019 for Erdos-Renyi random graphs in large n limit. Returns A dictionary of individuals with attributes, including their age and the ids of their contacts drawn from given network distribution parameters and the ages of contacts drawn according to overall age mixing data. A single social setting or layer of contacts. synthpops.contacts. make_contacts_with_social_layers_and_sex ( popdict , n_contacts_dic , location , state_location , country_location , sheet_name , activity_args , network_distr_args ) \u00b6 Create contact network according to overall age-mixing contact matrices for the US. Does not capture clustering or microstructure, therefore exact households, schools, or workplaces are not created. However, this does separate agents according to their age and gives them contacts likely for their age specified by the social settings they are likely to participate in. College students may also be workers, however here they are only students and we assume that any of their contacts in the work environment are likely to look like their contacts at school. Parameters popdict ( dict ) \u2013 dictionary of all individuals n_contacts_dic ( dict ) \u2013 number of contacts to draw on average by setting location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns activity_args ( dict ) \u2013 dictionary of age bounds for participating in different activities like going to school or working, also student-teacher ratio network_distr_args ( dict ) \u2013 network distribution parameters dictionary for average_degree, network_type, and directionality, can also include powerlaw exponents, block sizes (re: SBMs), clustering distribution, or other properties needed to generate network structures. Checkout https://networkx.github.io/documentation/stable/reference/generators.html#module-networkx.generators for what\u2019s possible Default \u2018network_type\u2019 is \u2018poisson_degree\u2019 for Erdos-Renyi random graphs in large n limit. Returns A dictionary of individuals with attributes, including their age and the ids of their contacts drawn from given network distribution parameters and the ages of contacts drawn according to age mixing data. Multiple social settings or layers so contacts are listed for different layers. synthpops.contacts. rehydrate ( data ) \u00b6 Populate popdict with uids, ages and contacts from generated microstructure data that was saved to data object Parameters data ( pop object ) \u2013 Returns Popdict (sc.objdict) synthpops.contacts. save_synthpop ( datadir , contacts , location ) \u00b6 Save pop data object to file. Parameters datadir ( string ) \u2013 file path to the data directory contacts ( dict ) \u2013 dictionary of people with contacts location ( string ) \u2013 name of the location Returns None synthpops.contacts. create_reduced_contacts_with_group_types ( popdict , group_1 , group_2 , setting , average_degree = 20 , p_matrix = None , force_cross_edges = True ) \u00b6 Create contacts between members of group 1 and group 2, fixing the average degree, and the probability of an edge between any two groups controlled by p_matrix if provided. Forces inter group edge for each individual in group 1 with force_cross_groups equal to True. This means not everyone in group 2 will have a contact with group 1. Parameters group_1 ( list ) \u2013 list of ids for group 1 group_2 ( list ) \u2013 list of ids for group 2 average_degree ( int ) \u2013 average degree across group 1 and 2 p_matrix ( np.ndarray ) \u2013 probability matrix for edges between any two groups force_cross_groups ( bool ) \u2013 If True, force each individual to have at least one contact with a member from the other group Returns Popdict with edges added for nodes in the two groups. Notes This method uses the Stochastic Block Model algorithm to generate contacts both between nodes in different groups and for nodes within the same group. In the current version, fixing the average degree and p_matrix, the matrix of probabilities for edges between any two groups is not supported. Future versions may add support for this. synthpops.contacts. make_contacts_from_microstructure ( datadir , location , state_location , country_location , n , with_industry_code = False ) \u00b6 Make a popdict from synthetic household, school, and workplace files with uids. If with_industry_code is True, then individuals will have a workplace industry code as well (default value is -1 to represent that this data is unavailable). Currently, industry codes are only available to assign to populations within the US. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in n ( int ) \u2013 number of people in the population with_industry_code ( bool ) \u2013 If True, assign workplace industry code read in from cached file Returns A popdict of people with attributes. Dictionary keys are the IDs of individuals in the population and the values are a dictionary for each individual with their attributes, such as age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and the IDs of their contacts in different layers. Different layers available are households (\u2018H\u2019), schools (\u2018S\u2019), and workplaces (\u2018W\u2019). Contacts in these layers are clustered and thus form a network composed of groups of people interacting with each other. For example, all household members are contacts of each other, and everyone in the same school is considered a contact of each other. Notes Methods to trim large groups of contacts down to better approximate a sense of close contacts (such as classroom sizes or smaller work groups are available via sp.trim_contacts() - see below). synthpops.contacts. make_contacts_from_microstructure_objects ( age_by_uid_dic , homes_by_uids , schools_by_uids , workplaces_by_uids , workplaces_by_industry_codes = None ) \u00b6 From microstructure objects (dictionary mapping ID to age, lists of lists in different settings, etc.), create a dictionary of individuals. Each key is the ID of an individual which maps to a dictionary for that individual with attributes such as their age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and contacts in different layers. Parameters age_by_uid_dic ( dict ) \u2013 dictionary mapping id to age for all individuals in the population homes_by_uids ( list ) \u2013 A list of lists where each sublist is a household and the IDs of the household members. schools_by_uids ( list ) \u2013 list of lists, where each sublist represents a school and the ids of the students and teachers within it workplaces_by_uids ( list ) \u2013 list of lists, where each sublist represents a workplace and the ids of the workers within it workplaces_by_industry_codes ( np.ndarray or None ) \u2013 array with workplace industry code for each workplace Returns A popdict of people with attributes. Dictionary keys are the IDs of individuals in the population and the values are a dictionary for each individual with their attributes, such as age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and the IDs of their contacts in different layers. Different layers available are households (\u2018H\u2019), schools (\u2018S\u2019), and workplaces (\u2018W\u2019). Contacts in these layers are clustered and thus form a network composed of groups of people interacting with each other. For example, all household members are contacts of each other, and everyone in the same school is considered a contact of each other. Notes Methods to trim large groups of contacts down to better approximate a sense of close contacts (such as classroom sizes or smaller work groups are available via sp.trim_contacts() - see below). synthpops.contacts. make_contacts_with_facilities_from_microstructure ( datadir , location , state_location , country_location , n , use_two_group_reduction = False , average_LTCF_degree = 20 ) \u00b6 Make a popdict from synthetic household, school, and workplace files with uids. If with_industry_code is True, then individuals will have a workplace industry code as well (default value is -1 to represent that this data is unavailable). Currently, industry codes are only available to assign to populations within the US. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in n ( int ) \u2013 number of people in the population with_industry_code ( bool ) \u2013 If True, assign workplace industry code read in from cached file use_two_group_reduction ( bool ) \u2013 If True, create long term care facilities with reduced contacts across both groups average_LTCF_degree ( int ) \u2013 default average degree in long term care facilities Returns A popdict of people with attributes. Dictionary keys are the IDs of individuals in the population and the values are a dictionary for each individual with their attributes, such as age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and the IDs of their contacts in different layers. Different layers available are households (\u2018H\u2019), schools (\u2018S\u2019), and workplaces (\u2018W\u2019), and long term care facilities (\u2018LTCF\u2019). Contacts in these layers are clustered and thus form a network composed of groups of people interacting with each other. For example, all household members are contacts of each other, and everyone in the same school is considered a contact of each other. If use_two_group_reduction is True, then contracts within \u2018LTCF\u2019 are reduced from fully connected. Notes Methods to trim large groups of contacts down to better approximate a sense of close contacts (such as classroom sizes or smaller work groups are available via sp.trim_contacts() or sp.create_reduced_contacts_with_group_types(): see these methods for more details). synthpops.contacts. make_contacts_with_facilities_from_microstructure_objects ( age_by_uid_dic , homes_by_uids , schools_by_uids , workplaces_by_uids , facilities_by_uids , facilities_staff_uids , workplaces_by_industry_codes = None , use_two_group_reduction = False , average_LTCF_degree = 20 ) \u00b6 From microstructure objects (dictionary mapping ID to age, lists of lists in different settings, etc.), create a dictionary of individuals. Each key is the ID of an individual which maps to a dictionary for that individual with attributes such as their age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and contacts in different layers. Parameters age_by_uid_dic ( dict ) \u2013 dictionary mapping id to age for all individuals in the population homes_by_uids ( list ) \u2013 A list of lists where each sublist is a household and the IDs of the household members. schools_by_uids ( list ) \u2013 A list of lists, where each sublist represents a school and the ids of the students and teachers within it workplaces_by_uids ( list ) \u2013 A list of lists, where each sublist represents a workplace and the ids of the workers within it facilities_by_uids ( list ) \u2013 A list of lists, where each sublist represents a skilled nursing or long term care facility and the ids of the residents living within it facilities_staff_uids ( list ) \u2013 A list of lists, where each sublist represents a skilled nursing or long term care facility and the ids of the staff working within it workplaces_by_industry_codes ( np.ndarray or None ) \u2013 array with workplace industry code for each workplace use_two_group_reduction ( bool ) \u2013 If True, create long term care facilities with reduced contacts across both groups average_LTCF_degree ( int ) \u2013 default average degree in long term care facilities Returns A popdict of people with attributes. Dictionary keys are the IDs of individuals in the population and the values are a dictionary for each individual with their attributes, such as age, household ID (hhid), school ID (scid), workplace ID (wpid), workplace industry code (wpindcode) if available, and the IDs of their contacts in different layers. Different layers available are households (\u2018H\u2019), schools (\u2018S\u2019), and workplaces (\u2018W\u2019), and long term care facilities (\u2018LTCF\u2019). Contacts in these layers are clustered and thus form a network composed of groups of people interacting with each other. For example, all household members are contacts of each other, and everyone in the same school is considered a contact of each other. If use_two_group_reduction is True, then contracts within \u2018LTCF\u2019 are reduced from fully connected. Notes Methods to trim large groups of contacts down to better approximate a sense of close contacts (such as classroom sizes or smaller work groups are available via sp.trim_contacts() or sp.create_reduced_contacts_with_group_types(): see these methods for more details). synthpops.contacts. make_graphs ( popdict , layers ) \u00b6 Make a dictionary of Networkx by layer. Parameters popdict ( dict ) \u2013 dictionary of individuals with attributes, including their age, household ID, school ID, workplace ID, and the ids of their contacts by layer layers ( list ) \u2013 list of contact layers Retuns: Dictionary of Networkx graphs, one for each layer of contacts. synthpops.contacts. write_edgelists ( popdict , layers , G_dic = None , location = None , state_location = None , country_location = None ) \u00b6 Write edgelists for each layer of contacts. Parameters popdict ( dict ) \u2013 dictionary of individuals with attributes, including their age, household ID, school ID, workplace ID, and the ids of their contacts by layer layers ( list ) \u2013 list of contact layers G_dic ( dict ) \u2013 dictionary of Networkx graphs, one for each layer of contacts location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns None synthpops.contacts. make_contacts ( popdict = None , n_contacts_dic = None , location = None , state_location = None , country_location = None , sheet_name = None , options_args = None , activity_args = None , network_distr_args = None ) \u00b6 Generates a list of contacts for everyone in the population. popdict is a dictionary with N keys (one for each person), with subkeys for age, sex, location, and potentially other factors. This function adds a new subkey, contacts, which is a list of contact IDs for each individual. If directed=False (default), if person A is a contact of person B, then person B is also a contact of person A. Example output (input is the same, minus the \u201ccontacts\u201d field): popdict = { '8acf08f0' : { 'age' : 57.3 , 'sex' : 0 , 'loc' : ( 47.6062 , 122.3321 ), 'contacts' : [ '43da76b5' ] }, '43da76b5' : { 'age' : 55.3 , 'sex' : 1 , 'loc' : ( 47.2473 , 122.6482 ), 'contacts' : [ '8acf08f0' , '2d2ad46f' ] }, } Parameters popdict ( dict ) \u2013 dictionary, should have ages of individuals if not using cached microstructure data n_contacts_dic ( dict ) \u2013 average number of contacts by setting location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns options_args ( dict ) \u2013 dictionary of flags to set different population and contact generating options activity_args ( dict ) \u2013 dictionary of age bounds for participating in different activities like going to school or working, also student-teacher ratio network_distr_args ( dict ) \u2013 network distribution parameters dictionary for average_degree, network_type, and directionality, can also include powerlaw exponents, block sizes (re: SBMs), clustering distribution, or other properties needed to generate network structures. Checkout https://networkx.github.io/documentation/stable/reference/generators.html#module-networkx.generators for what\u2019s possible Default \u2018network_type\u2019 is \u2018poisson_degree\u2019 for Erdos-Renyi random graphs in large n limit. Returns A dictionary of individuals with attributes, including their age and the ids of their contacts. synthpops.contacts. choose_contacts ( a , size ) \u00b6 Numbafy np.random.choice(); about twice as fast synthpops.contacts. trim_contacts ( contacts , trimmed_size_dic = None , use_clusters = False , verbose = False ) \u00b6 Trim down contacts in school or work environments from everyone. Parameters contacts ( dict ) \u2013 dictionary of individuals with attributes, including their age and the ids of their contacts trimmed_size_dic ( dict ) \u2013 dictionary of threshold values for the number of contacts in school (\u2018S\u2019) and work (\u2018W\u2019) so that for individuals with more contacts than this, we select a smaller subset of contacts considerd close contacts use_clusters ( bool ) \u2013 If True, trimmed down contact networks will preserve clustering so that an individual\u2019s close contacts in school or at work are also contacts of each other verbose ( bool ) \u2013 If True, print average number of close contacts in school and at work Returns A dictionary of individuals with attributes, including their age and the ids of their close contacts. synthpops.contacts. show_layers ( popdict , show_ages = False , show_n = 20 ) \u00b6 Print out the contacts for individuals in the different possible social settings or layers. Parameters popdict ( dict ) \u2013 dictionary of individuals with attributes, including their age and the ids of their close contacts show_ages ( bool ) \u2013 If True, show the ages of contacts, else show their ids show_n ( int ) \u2013 number of individuals to show contacts for Returns None synthpops.data_distributions module \u00b6 Read in data distributions. synthpops.data_distributions. get_age_brackets_from_df ( ab_file_path ) \u00b6 Create a dict of age bracket ranges from ab_file_path. Parameters ab_file_path ( string ) \u2013 file path to get the ends of different age brackets from Returns A dictionary with a np.ndarray of the age range that maps to each age bracket key. Examples : get_age_brackets_from_df ( ab_file_path ) returns a dictionary age_brackets , where age_brackets [ 0 ] is the age range for the first age bracket , age_brackets [ 1 ] is the age range for the second age bracket , etc . synthpops.data_distributions. get_gender_fraction_by_age_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for gender fractions by age bracket. This should only be used if the data is available. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to the gender fraction by age bracket data. synthpops.data_distributions. read_gender_fraction_by_age_bracket ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 A dict of gender fractions by age bracket, either by location, state_location, country_location strings, or by the file_path if that\u2019s given. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the fractions for two genders by age bracket. synthpops.data_distributions. get_age_bracket_distr_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for age distribution by age brackets. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to the age distribution by age bracket data. synthpops.data_distributions. read_age_bracket_distr ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 A dict of age distribution by age brackets. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the age distribution by age bracket. Keys map to a range of ages in that age bracket. synthpops.data_distributions. get_household_size_distr_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for household size distribution. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to the household size distribution data. synthpops.data_distributions. get_household_size_distr ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 A dictionary of the distributions of household sizes. If you don\u2019t give the file_path, then supply the location and state_location strings. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the household size distribution data. Keys map to the household size as an integer, values are the percent of households of that size. synthpops.data_distributions. get_head_age_brackets_path ( datadir , state_location = None , country_location = None ) \u00b6 Get file_path for head of household age brackets. If data doesn\u2019t exist at the state level, only give the country_location. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in Returns A file path to the age brackets for head of household distribution data. synthpops.data_distributions. get_head_age_brackets ( datadir , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get a dictionary of head age brackets either from the file_path directly, or using the other parameters to figure out what the file_path should be. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the age brackets for head of household distribution data. Keys map to the age bracket as an integer, values are the percent of households which head of household in that age bracket. synthpops.data_distributions. get_household_head_age_by_size_path ( datadir , state_location = None , country_location = None ) \u00b6 Get file_path for head of household age by size counts or distribution. If the data doesn\u2019t exist at the state level, only give the country_location. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in Returns A file path to the head of household age by household size count or distribution data. synthpops.data_distributions. get_household_head_age_by_size_df ( datadir , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Return a pandas df of head of household age by the size of the household. If the file_path is given return from there first. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A file path to the head of household age by household size count or distribution data. synthpops.data_distributions. get_head_age_by_size_distr ( datadir , state_location = None , country_location = None , file_path = None , household_size_1_included = False , use_default = False ) \u00b6 Create an array of head of household age bracket counts (col) given by size (row). If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data household_size_1_included \u2013 if True, age distribution for who lives alone is included in the head of household age by household size dataframe, so it will be used. Else, assume a uniform distribution for this among all ages of adults. use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns An array where each row s represents the age distribution of the head of households for households of size s-1. synthpops.data_distributions. get_census_age_brackets_path ( datadir , state_location = None , country_location = None ) \u00b6 Get file_path for census age brackets: depends on the state or country of the source data on contact patterns. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in Returns A file path to the age brackets to be used with census age data in combination with the contact matrix data. synthpops.data_distributions. get_census_age_brackets ( datadir , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get census age brackets: depends on the country or source of contact pattern data. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state country_location ( string ) \u2013 name of the country the state_location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data household_size_1_included \u2013 if True, age distribution for who lives alone is included in the head of household age by household size dataframe, so it will be used. Else, assume a uniform distribution for this among all ages of adults. use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the range of ages that map to each age bracket. synthpops.data_distributions. get_contact_matrix ( datadir , setting_code , sheet_name = None , file_path = None , delimiter = ' ' , header = None ) \u00b6 Get setting specific contact matrix given sheet name to use. If file_path is given, then delimiter and header should also be specified. Parameters datadir ( string ) \u2013 file path to the data directory setting_code ( string ) \u2013 name of the physial contact setting: H for households, S for schools, W for workplaces, C for community or other sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data delimiter ( string ) \u2013 delimter for the contact matrix file header ( int ) \u2013 row number for the header of the file Returns Matrix of contact patterns where each row i is the average contact patterns for an individual in age bracket i and the columns represent the age brackets of their contacts. The matrix element i,j is then the contact rate, number, or frequency for the average individual in age bracket i with all of their contacts in age bracket j in that physical contact setting. synthpops.data_distributions. get_contact_matrix_dic ( datadir , sheet_name = None , file_path_dic = None , delimiter = ' ' , header = None , use_default = False ) \u00b6 Create a dict of setting specific age mixing matrices. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory setting_code ( string ) \u2013 name of the physial contact setting: H for households, S for schools, W for workplaces, C for community or other sheet_name ( string ) \u2013 name of the sheet in the excel file with contact patterns file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data delimiter ( string ) \u2013 delimter for the contact matrix file header ( int ) \u2013 row number for the header of the file Returns A dictionary of the different contact matrices for each population, given by the sheet name. Keys map to the different possible physical contact settings for which data are available. synthpops.data_distributions. get_usa_school_enrollment_rates_df ( datadir , locations , location , state_location , country_location , level ) \u00b6 Filters a dataframe on school enrollment rates in the US at the scale of county or PUMA down to relevant locations in the state. Specifying locations as a list allow the selection of multiple counties in the same state, in whatever combination desired. Parameters datadir ( string ) \u2013 file path to the data directory locations ( string or list ) \u2013 name of locations to filter for, either as a string or a list of multiple locations location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which here should always be \u2018usa\u2019 level ( string ) \u2013 name of the level at which the data are aggregated, in general \u2018county\u2019 but could also be \u2018PUMA\u2019 Returns Pandas dataframe with school enrollment data in the US for at the scale of county of PUMA for specified locations within the same state. Example usage: locations = \u2018King County, Washington\u2019 for a single county locations = [\u2018King County, Washington\u2019, \u2018Pierce County, Washington\u2019] for multiple counties synthpops.data_distributions. process_usa_school_enrollment_rates ( datadir , locations , location , state_location , country_location , level ) \u00b6 Process US school enrollment rates at the county level for age groups and create a dictionary of rates for single year ages. Parameters datadir ( string ) \u2013 file path to the data directory locations ( string or list ) \u2013 name of locations to filter for, either as a string or a list of multiple locations location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which here should always be \u2018usa\u2019 level ( string ) \u2013 name of the level at which the data are aggregated, in general \u2018county\u2019 but could also be \u2018PUMA\u2019 Returns A dictionary of enrollment rates by single year ages from 0 to 100. synthpops.data_distributions. write_school_enrollment_rates ( datadir , locations , location , state_location , country_location , level ) \u00b6 Write enrollment rates from age brackets into a file for single year ages. Parameters datadir ( string ) \u2013 file path to the data directory locations ( string or list ) \u2013 name of locations to filter for, either as a string or a list of multiple locations location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which here should always be \u2018usa\u2019 level ( string ) \u2013 name of the level at which the data are aggregated, in general \u2018county\u2019 but could also be \u2018PUMA\u2019 Returns None synthpops.data_distributions. get_school_enrollment_rates_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get a file_path for enrollment rates by age. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to the school enrollment rates. synthpops.data_distributions. get_school_enrollment_rates ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get dictionary of enrollment rates by age. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of school enrollment rates by age. synthpops.data_distributions. get_school_size_brackets_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for school size brackets specific to the location under study. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to school size brackets. synthpops.data_distributions. get_school_size_brackets ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get school size brackets: depends on the source/location of the data. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of school size brackets. synthpops.data_distributions. get_school_sizes_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for school sizes specific to the location under study. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to school sizes. synthpops.data_distributions. get_school_sizes_df ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get pandas dataframe with school enrollment sizes: depends on the country or source of contact pattern data. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A pandas dataframe with school sizes. synthpops.data_distributions. get_school_size_distr_by_brackets_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for the distribution of school size by brackets. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to the distribution of school sizes by bracket. synthpops.data_distributions. get_school_size_distr_by_brackets ( datadir , location = None , state_location = None , country_location = None , counts_available = False , file_path = None , use_default = False ) \u00b6 Get distribution of school sizes by bracket. Either you have enrollments by individual school or you have school size distribution that is binned. Either way, you want to get a school size distribution. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in counts_available ( bool ) \u2013 if True, a list of school sizes is available and a count of the sizes can be constructed file_path ( string ) \u2013 file path to user specified distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the distribution of school sizes by bracket. synthpops.data_distributions. write_school_size_distr_by_brackets ( datadir , location = None , state_location = None , country_location = None , counts_available = True ) \u00b6 Write school size distribution by brackets to file. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in counts_available ( bool ) \u2013 if True, a list of school sizes is available and a count of the sizes can be constructed use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the distribution of school sizes by bracket. synthpops.data_distributions. get_usa_school_sizes_by_bracket ( datadir , location , state_location , country_location ) \u00b6 Get distribution of school sizes by bracket specifically for the US. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which should be the \u2018usa\u2019 size_distr_file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the distribution of school sizes by bracket. synthpops.data_distributions. get_employment_rates_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for employment rates by age. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to employment rates by age. synthpops.data_distributions. get_employment_rates ( datadir , location , state_location , country_location , file_path = None , use_default = False ) \u00b6 Get employment rates by age. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which should be the \u2018usa\u2019 size_distr_file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of employment rates by age. synthpops.data_distributions. get_workplace_size_brackets_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for workplace size brackets. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to workplace size brackets. synthpops.data_distributions. get_workplace_size_brackets ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get workplace size brackets. If use_default, then we\u2019ll first try to look for location specific data and if that\u2019s not available we\u2019ll use default data from Seattle, WA. This may not be appropriate for the population under study so it\u2019s best to provide as much data as you can for the specific population. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which should be the \u2018usa\u2019 size_distr_file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of workplace size brackets. synthpops.data_distributions. get_workplace_size_distr_by_brackets_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for the distribution of workplace size by brackets. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to the distribution of workplace sizes by bracket. synthpops.data_distributions. get_workplace_size_distr_by_brackets ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = False ) \u00b6 Get the distribution of workplace size by brackets. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in size_distr_file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the distribution of workplace sizes by bracket. synthpops.data_distributions. get_state_postal_code ( state_location ) \u00b6 synthpops.data_distributions. get_usa_long_term_care_facility_path ( datadir , state_location = None , part = None ) \u00b6 Get file_path for state level data on Long Term Care Facilities for the US from 2015-2016. Parameters datadir ( string ) \u2013 file path to the data directory state_location ( string ) \u2013 name of the state part ( int ) \u2013 part 1 or 2 of the table Returns National Study of Long-Term Care Providers, 2015-2016\u2019. Part 1 or 2 are available. Return type A file path to data on Long Term Care Facilities from \u2018Long-Term Care Providers and Services Users in the United States - State Estimates Supplement synthpops.data_distributions. get_usa_long_term_care_facility_data ( datadir , state_location = None , part = None , file_path = None , use_default = False ) \u00b6 synthpops.data_distributions. get_usa_long_term_care_facility_residents_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for the size distribution of residents per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to data on the size distribution of residents per facility for Long Term Care Facilities. synthpops.data_distributions. get_usa_long_term_care_facility_residents_distr ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = None ) \u00b6 Get size distribution of residents per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the distribution of residents per facility for Long Term Care Facilities. synthpops.data_distributions. get_usa_long_term_care_facility_residents_distr_brackets_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for the size bins for the distribution of residents per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to data on the size bins for the distribution of residents per facility for Long Term Care Facilities. synthpops.data_distributions. get_usa_long_term_care_facility_residents_distr_brackets ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = None ) \u00b6 Get size bins for the distribution of residents per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which should be the \u2018usa\u2019 size_distr_file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of size brackets or bins for residents per facility. synthpops.data_distributions. get_usa_long_term_care_facility_resident_to_staff_ratios_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for the distribution of resident to staff ratios per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to data on the distribution of resident to staff ratios per facility for Long Term Care Facilities. synthpops.data_distributions. get_usa_long_term_care_facility_resident_to_staff_ratios_distr ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = None ) \u00b6 Get size distribution of resident to staff ratios per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in file_path ( string ) \u2013 file path to user specified distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of the distribution of residents per facility for Long Term Care Facilities. synthpops.data_distributions. get_usa_long_term_care_facility_resident_to_staff_ratios_brackets_path ( datadir , location = None , state_location = None , country_location = None ) \u00b6 Get file_path for the size bins for the distribution of resident to staff ratios per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns A file path to data on the size bins for the distribution of resident to staff ratios per facility for Long Term Care Facilities. synthpops.data_distributions. get_usa_long_term_care_facility_resident_to_staff_ratios_brackets ( datadir , location = None , state_location = None , country_location = None , file_path = None , use_default = None ) \u00b6 Get size bins for the distribution of resident to staff ratios per facility for Long Term Care Facilities. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in, which should be the \u2018usa\u2019 size_distr_file_path ( string ) \u2013 file path to user specified gender by age bracket distribution data use_default ( bool ) \u2013 if True, try to first use the other parameters to find data specific to the location under study, otherwise returns default data drawing from Seattle, Washington. Returns A dictionary of size brackets or bins for resident to staff ratios per facility. synthpops.long_term_care_facilities module \u00b6 Modeling Seattle Metro Long Term Care Facilities synthpops.long_term_care_facilities. custom_resample_age ( exp_age_distr , a ) \u00b6 Resampling younger ages to better match data Parameters single_year_age_distr ( dict ) \u2013 age distribution age ( int ) \u2013 age as an integer Returns Resampled age as an integer. Notes This is not always necessary, but is mostly used to smooth out sharp edges in the age distribution when spsamp.resample_age() produces too many of one year and under produces the surrounding ages. For example, new borns (0 years old) may be over produced, and 1 year olds under produced, so this function can be customized to correct for that. synthpops.long_term_care_facilities. custom_generate_larger_households ( size , hh_sizes , hha_by_size_counts , hha_brackets , age_brackets , age_by_brackets_dic , contact_matrix_dic , single_year_age_distr ) \u00b6 Generate ages of those living in households of greater than one individual. Reference individual is sampled conditional on the household size. All other household members have their ages sampled conditional on the reference person\u2019s age and the age mixing contact matrix in households for the population under study. Parameters size ( int ) \u2013 The household size. hh_sizes ( array ) \u2013 The count of household size s at index s-1. hha_by_size_counts ( matrix ) \u2013 A matrix in which each row contains the age distribution of the reference person for household size s at index s-1. hha_brackets ( dict ) \u2013 The age brackets for the heads of household. age_brackets ( dict ) \u2013 A dictionary mapping age bracket keys to age bracket range. age_by_brackets_dic ( dict ) \u2013 A dictionary mapping age to the age bracket range it falls within. contact_matrix_dic ( dict ) \u2013 A dictionary of the age-specific contact matrix for different physical contact settings. single_year_age_distr ( dict ) \u2013 The age distribution. Returns An array of households for size size where each household is a row and the values in the row are the ages of the household members. The first age in the row is the age of the reference individual. synthpops.long_term_care_facilities. custom_generate_all_households ( N , hh_sizes , hha_by_size_counts , hha_brackets , age_brackets , age_by_brackets_dic , contact_matrix_dic , single_year_age_distr ) \u00b6 Generate the ages of those living in households together. First create households of people living alone, then larger households. For households larger than 1, a reference individual\u2019s age is sampled conditional on the household size, while all other household members have their ages sampled conditional on the reference person\u2019s age and the age mixing contact matrix in households for the population under study. Parameters N ( int ) \u2013 The number of people in the population. hh_sizes ( array ) \u2013 The count of household size s at index s-1. hha_by_size_counts ( matrix ) \u2013 A matrix in which each row contains the age distribution of the reference person for household size s at index s-1. hha_brackets ( dict ) \u2013 The age brackets for the heads of household. age_brackets ( dict ) \u2013 The dictionary mapping age bracket keys to age bracket range. age_by_brackets_dic ( dict ) \u2013 The dictionary mapping age to the age bracket range it falls within. contact_matrix_dic ( dict ) \u2013 The dictionary of the age-specific contact matrix for different physical contact settings. single_year_age_distr ( dict ) \u2013 The age distribution. Returns An array of all households where each household is a row and the values in the row are the ages of the household members. The first age in the row is the age of the reference individual. Households are randomly shuffled by size. synthpops.long_term_care_facilities. write_age_by_uid_dic ( datadir , location , state_location , country_location , age_by_uid_dic ) \u00b6 Write the dictionary of ID mapping to age for each individual in the population. Parameters datadir ( string ) \u2013 The file path to the data directory. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. age_by_uid_dic ( dict ) \u2013 A dictionary mapping ID to age for each individual in the population. Returns None synthpops.long_term_care_facilities. write_groups_by_age_and_uid ( datadir , location , state_location , country_location , age_by_uid_dic , group_type , groups_by_uids , secondary_groups_by_uids = None ) \u00b6 Write groups to file with both ID and their ages. Parameters datadir ( string ) \u2013 The file path to the data directory. location ( string ) \u2013 The name of the location. state_location ( string ) \u2013 The name of the state the location is in. country_location ( string ) \u2013 The name of the country the location is in. groups_by_uids ( list ) \u2013 The list of lists, where each sublist represents a household and the IDs of the household members. age_by_uid_dic ( dict ) \u2013 A dictionary mapping ID to age for each individual in the population. Returns None synthpops.long_term_care_facilities. generate_microstructure_with_facilities ( datadir , location , state_location , country_location , gen_pop_size , sheet_name = 'United States of America' , school_enrollment_counts_available = True , do_plot = False , verbose = False , write = False , return_popdict = False , use_default = False , use_two_group_reduction = False , average_LTCF_degree = 20 ) \u00b6 synthpops.long_term_care_facilities. check_all_residents_are_connected_to_staff ( popdict ) \u00b6 synthpops.plot_tools module \u00b6 synthpops.plot_tools. calculate_contact_matrix ( contacts , density_or_frequency = 'density' , setting_code = 'H' ) \u00b6 Calculate the symmetric contact matrix. Parameters contacts ( dict ) \u2013 dictionary of individuals with attributes, including their age and the ids of their contacts density_or_frequency ( string ) \u2013 If \u2018density\u2019, then each contact counts for 1/(group size -1) of a person\u2019s contact in a group, elif \u2018frequency\u2019 then count each contact. This means that more people in a group leads to higher rates of contact/exposure. Returns Symmetric age specific contact matrix. synthpops.plot_tools. plot_contact_frequency ( freq_matrix_dic , age_count , aggregate_age_count , age_brackets , age_by_brackets_dic , setting_code = 'H' , density_or_frequency = 'density' , logcolors_flag = False , aggregate_flag = True ) \u00b6 Plots the age specific contact matrix where the matrix element matrix_ij is the contact rate or frequency for the average individual in age group i with all of their contacts in age group j. Can either be density or frequency definition, as well as a single year age contact matrix or a contact matrix for aggregated age brackets. Parameters freq_matrix_dic ( matrix ) \u2013 symmetric contact matrix, element ij is the contact for an average individual in age group i with all of their contacts in age group j age_count ( dict ) \u2013 dictionary with the count of individuals in the population for each age aggregate_age_count ( dict ) \u2013 dictionary with the count of individuals in the population in each age bracket age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_by_brackets_dic ( dict ) \u2013 dictionary mapping age to the age bracket range it falls in setting_code ( string ) \u2013 name of the physial contact setting: H for households, S for schools, W for workplaces, C for community or other density_or_frequency ( string ) \u2013 If \u2018density\u2019, then each contact counts for 1/(group size -1) of a person\u2019s contact in a group, elif \u2018frequency\u2019 then count each contact. This means that more people in a group leads to higher rates of contact/exposure. logcolors_flag ( bool ) \u2013 If True, plot heatmap in logscale aggregate_flag ( book ) \u2013 If True, plot the contact matrix for aggregate age brackets, else single year age contact matrix. Returns A fig object. synthpops.sampling module \u00b6 Sample distributions, either from real world data or from uniform distributions synthpops.sampling. set_seed ( seed = None ) \u00b6 Reset the random seed \u2013 complicated because of Numba synthpops.sampling. sample_single_dict ( distr_keys , distr_vals ) \u00b6 Sample from a distribution. Parameters distr ( dict or np.ndarray ) \u2013 distribution Returns A single sampled value from a distribution. synthpops.sampling. sample_single_arr ( distr ) \u00b6 Sample from a distribution. Parameters distr ( dict or np.ndarray ) \u2013 distribution Returns A single sampled value from a distribution. synthpops.sampling. resample_age ( age_dist_vals , age ) \u00b6 Resample age from single year age distribution. Parameters single_year_age_distr ( arr ) \u2013 age distribution, ordered by age age ( int ) \u2013 age as an integer Returns Resampled age as an integer. synthpops.sampling. sample_from_range ( distr , min_val , max_val ) \u00b6 Sample from a distribution from min_val to max_val, inclusive. Parameters distr ( dict ) \u2013 distribution with integer keys min_val ( int ) \u2013 minimum of the range to sample from max_val ( int ) \u2013 maximum of the range to sample from Returns A sampled number from the range min_val to max_val in the distribution distr. synthpops.sampling. sample_bracket ( distr , brackets ) \u00b6 Sample bracket from a distribution (potentially absolete). Parameters distr ( dict or np.ndarray ) \u2013 distribution for bracket keys Returns A sampled bracket from a distribution. synthpops.sampling. sample_n ( nk , distr ) \u00b6 Sample nk values from a distribution Parameters nk ( int ) \u2013 number of samples distr ( dict or np.ndarray ) \u2013 distribution Returns A dictionary with the count for n samples from a distribution synthpops.sampling. sample_contact_age ( age , age_brackets , age_by_brackets_dic , age_mixing_matrix , single_year_age_distr = None ) \u00b6 Sample the age of a contact from age mixing patterns. Age of contact is uniformly drawn from the age bracket sampled from the age mixing matrix, unless single_year_age_distr is available. Parameters age ( int ) \u2013 age of reference individual age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_mixing_matrix ( matrix ) \u2013 age specific contact matrix single_year_age_distr ( dict ) \u2013 age distribution by single year ages if available Returns Age of contact by age of individual sampled from an age mixing matrix. synthpops.sampling. sample_n_contact_ages ( n_contacts , age , age_brackets , age_by_brackets_dic , age_mixing_matrix_dic , weights_dic , single_year_age_distr = None ) \u00b6 Sample the age of n_contacts contacts from age mixing patterns. Age of each contact is uniformly drawn from the age bracket sampled from the age mixing matrix, unless single_year_age_distr is available. Combines setting specific weights to create an age mixing matrix from which contact ages are sampled. Parameters n_contacts ( int ) \u2013 number of contacts to draw ages for age ( int ) \u2013 age of reference individual age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_by_brackets_dic ( dict ) \u2013 dictionary mapping age to the age bracket range it falls in age_mixing_matrix_dic ( dict ) \u2013 dictionary of age specific contact matrix for different physical contact settings weights_dic ( dict ) \u2013 weights to combine contact matrices single_year_age_distr ( dict ) \u2013 age distribution by single year ages if available Returns List of ages of n_contacts contacts by age of individual sampled from a combined age mixing matrix. synthpops.sampling. sample_n_contact_ages_with_matrix ( n_contacts , age , age_brackets , age_by_brackets_dic , age_mixing_matrix , single_year_age_distr = None ) \u00b6 Sample the age of n_contacts contacts from age mixing matrix. Age of each contact is uniformly drawn from the age bracket sampled from the age mixing matrix, unless single_year_age_distr is available. Parameters n_contacts ( int ) \u2013 number of contacts to draw ages for age ( int ) \u2013 age of reference individual age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_by_brackets_dic ( dict ) \u2013 dictionary mapping age to the age bracket range it falls in age_mixing_matrix ( matrix ) \u2013 age specific contact matrix weights_dic ( dict ) \u2013 weights to combine contact matrices single_year_age_distr ( dict ) \u2013 age distribution by single year ages if available Returns List of ages of n_contacts contacts by age of individual sampled from an age mixing matrix. synthpops.sampling. get_n_contact_ids_by_age ( contact_ids_by_age_dic , contact_ages , age_brackets , age_by_brackets_dic ) \u00b6 Get ids for the contacts with ages in contact_ages. Parameters contact_ids_by_age_dic ( dict ) \u2013 dictionary mapping lists of ids to the age of individuals with those ids contact_ages ( list ) \u2013 list of integer ages age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_by_brackets_dic ( dict ) \u2013 dictionary mapping age to the age bracket range it falls in Return set of ids of n_contacts sampled from an age mixing matrix, where potential contacts are chosen from a list of contact ids by age synthpops.sampling. pt ( rate ) \u00b6 Results of a Poisson trial Parameters rate ( float ) \u2013 Poisson rate Returns result (bool) of Poisson trial. synthpops.sampling. get_age_sex ( gender_fraction_by_age , age_bracket_distr , age_brackets , min_age = 0 , max_age = 100 , age_mean = 40 , age_std = 20 ) \u00b6 Sample a person\u2019s age and sex based on gender and age census data defined for age brackets. Else, return random age and sex. Parameters gender_fraction_by_age ( dict ) \u2013 dictionary of the fractions for two genders by age bracket age_bracket_distr ( dict ) \u2013 : distribution of ages by brackets age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range min_age ( int ) \u2013 minimum age to draw max_age ( int ) \u2013 maximum age to draw age_mean ( int ) \u2013 mean of age distribution age_std ( int ) \u2013 standard deviation of age distribution Returns Sampled age (float), sex (int; 0 for female, 1 for male) synthpops.sampling. get_age_sex_n ( gender_fraction_by_age , age_bracket_distr , age_brackets , n_people = 1 , min_age = 0 , max_age = 100 , age_mean = 40 , age_std = 20 ) \u00b6 Sample n_people peoples\u2019 age and sex from gender and age census data defined for age brackets. Else, return random ages and sex. Two lists ordered by age bracket so that people from the first age bracket show up at the front of both lists and people from the last age bracket show up at the end. Parameters gender_fraction_by_age ( dict ) \u2013 dictionary of the fractions for two genders by age bracket age_bracket_distr ( dict ) \u2013 : distribution of ages by brackets age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range n_people ( int ) \u2013 number of people to draw age and sex for min_age ( int ) \u2013 minimum age to draw max_age ( int ) \u2013 maximum age to draw age_mean ( int ) \u2013 mean of age distribution age_std ( int ) \u2013 standard deviation of age distribution Returns Two lists of sampled ages (float) and sexes (int; 0 for female, 1 for male) ordered by age bracket so that people from the first age bracket show up at the front of both lists and people from the last age bracket show up at the end. synthpops.sampling. get_seattle_age_sex ( datadir , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' ) \u00b6 Sample a person\u2019s age and sex based on US gender and age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns Sampled age (float), sex (int; 0 for female, 1 for male) synthpops.sampling. get_seattle_age_sex_n ( datadir , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' , n_people = 10000.0 ) \u00b6 Sample n_people peoples\u2019 age and sex based on US gender and age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in n_people ( float or int ) \u2013 number of people to draw age and sex for Returns Two lists of sampled ages (float) and sexes (int; 0 for female, 1 for male) ordered by age bracket so that people from the first age bracket show up at the front of both lists and people from the last age bracket show up at the end. synthpops.sampling. get_usa_age_sex ( datadir , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' ) \u00b6 Sample a person\u2019s age and sex based on US gender and age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in Returns Sampled age (float), sex (int; 0 for female, 1 for male) synthpops.sampling. get_usa_age_sex_n ( datadir , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' , n_people = 10000.0 ) \u00b6 Sample n_people peoples\u2019 age and sex based on US gender and age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in n_people ( float or int ) \u2013 number of people to draw age and sex for Returns Two lists of sampled ages (float) and sexes (int; 0 for female, 1 for male) ordered by age bracket so that people from the first age bracket show up at the front of both lists and people from the last age bracket show up at the end. synthpops.sampling. get_usa_age_n ( datadir , sexes , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' ) \u00b6 Sample n_people peoples\u2019 age based on list of sexes supplied and US gender and age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory sexes ( list ) \u2013 list of sexes location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in n_people ( float or int ) \u2013 number of people to draw age and sex for Returns Two lists of sampled ages (float) and sexes (int; 0 for female, 1 for male) ordered by age bracket so that people from the first age bracket show up at the front of both lists and people from the last age bracket show up at the end. synthpops.sampling. get_usa_sex_n ( datadir , ages , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' ) \u00b6 Sample n_people peoples\u2019 sex based on list of ages supplied and US gender and age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory ages ( list ) \u2013 list of ages location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in n_people ( float or int ) \u2013 number of people to draw age and sex for Returns Two lists of sampled ages (float) and sexes (int; 0 for female, 1 for male) ordered by age bracket so that people from the first age bracket show up at the front of both lists and people from the last age bracket show up at the end. synthpops.sampling. get_age_n ( datadir , n , location = 'seattle_metro' , state_location = 'Washington' , country_location = 'usa' , age_brackets_file = None , age_bracket_distr_file = None , age_brackets = None , age_bracket_distr = None ) \u00b6 Sample n_people peoples\u2019 age based on age census data defined for age brackets, with defaults set to Seattle, Washington. Parameters datadir ( string ) \u2013 file path to the data directory n ( float or int ) \u2013 number of people to draw age and sex for location ( string ) \u2013 name of the location state_location ( string ) \u2013 name of the state the location is in country_location ( string ) \u2013 name of the country the location is in age_brackets_file ( string ) \u2013 user file path to get age brackets from age_bracket_distr_file ( string ) \u2013 user file path to get age distribution by brackets from age_brackets ( dict ) \u2013 dictionary mapping age bracket keys to age bracket range age_bracket_distr ( dict ) \u2013 : distribution of ages by brackets Returns List of sampled ages (float) ordered by age bracket so that people from the first age bracket show up at the front of the list and people from the last age bracket show up at the end. synthpops.sampling. get_mortality_rates_filepath ( path ) \u00b6 Get file path to mortality rates. Parameters path ( string ) \u2013 path to folder containing mortality rates by age brackets data. Returns The filepath to mortality rates by age bracket. synthpops.sampling. get_mortality_rates_by_age_bracket ( file_path ) \u00b6 Get mortality rates by age bracket Parameters file_path ( string ) \u2013 path to mortality rates by age bracket data. Returns A dictionary of mortality rates by age bracket. synthpops.sampling. get_mortality_rates_by_age ( mortality_rate_by_age_bracket , mortality_age_brackets ) \u00b6 Get mortality rates by age Parameters mortality_rate_by_age_bracket ( dict ) \u2013 dictionary of mortality rates by age bracket mortality_age_brackets ( dict ) \u2013 dictionary of age brackets for raw mortality rate data Returns A dictionary of mortality rates by age. synthpops.sampling. calc_death ( person_age , mortality_rates ) \u00b6 Binomial draw of whether or not an individual succumbs to disease. Parameters person_age ( int ) \u2013 age of the ill individual. mortality_rates ( dict ) \u2013 dictionary of mortality rates by age Returns Bool representing the results of a binomial test; 1 for death, 0 for staying alive. synthpops.version module \u00b6 Module contents \u00b6"}, {"title": "SynthPops overview \u2014 SynthPops  documentation", "tags": "", "url": "./overview.html", "text": "SynthPops overview \u00b6 Fundamentally, the population network can be considered a multilayer network with the following qualities: Nodes are people, with attributes like age. Edges represent interactions between people, with attributes like the setting in which the interactions take place (for example, household, school, or work). The relationship between the interaction setting and properties governing disease transmission, such as frequency of contact and risk associated with each contact, is mapped separately by Covasim or other agent-based model . SynthPops reports whether the edge exists or not. If you are using SynthPops with Covasim, note that the relevant value in Covasim is the parameter beta , which captures the probability of transmission via a given edge per time step . The value of this parameter captures both number of effective contacts for disease transmission and transmission probability per contact. The generated network is a multilayer network in the sense that it is possible for people to be connected by multiple edges each in different layers of the network. The layers are referred to as contact layers . For example, the workplace contact layer is a representation of all of the pairwise connections between people at work, and the household contact layer represents the pairwise connections between household members. Typically these networks are clustered; in other words, everyone within a household interacts with each other, but not with other households. However, they may interact with members of other households via their school or workplace. Some level of community contacts outside of these networks can be configured using Covasim or other model being used with SynthPops. SynthPops functions in two stages: Generate people living in households, and then assign individuals to workplaces and schools. Save the output to a cache file on disk. Implemented in generate_synthetic_population() . Load the cached file and produce a dictionary that can be used by Covasim. Implemented in make_population() . Covasim assigns community contacts at random on a daily basis to reflect the random and stochastic aspect of contacts in many public spaces, such as shopping centers, parks, and community centers."}, {"title": "Python Module Index \u2014 SynthPops  documentation", "tags": "", "url": "./py-modindex.html", "text": "Python Module Index s s synthpops synthpops.api synthpops.base synthpops.config synthpops.contact_networks synthpops.contact_networks_industries synthpops.contacts synthpops.data_distributions synthpops.long_term_care_facilities synthpops.plot_tools synthpops.sampling synthpops.version"}, {"title": "School contact layer \u2014 SynthPops  documentation", "tags": "", "url": "./schools.html", "text": "School contact layer \u00b6 The school contact layer represents all of the pairwise connections between people in schools, including both students and teachers. Schools are special in that: Enrollment rates by age determine the probability of individual being a student given their age. Staff members such as teachers are chosen from individuals determined to be in the adult labor force. The current methods in SynthPops treat student and worker status as mutually exclusive. Many young adults may be both students and workers, part time or full time in either status. The ability to select individuals to participate in both activities will be introduced in a later version of the model. Data needed \u00b6 The following data is required for schools: School size distribution : school_size , percent 0 - 50 , 0.2 51 - 100 , 0.1 101 - 300 , 0.3 Enrollment by age specifying the percentage of people of each age attending school. See get_school_enrollment_rates() , but note that this mainly implements parsing a Seattle-specific data file to produce the following data structure, which could equivalently be read directly from a file: age , percent 0 , 0 1 , 0 2 , 0 3 , 0.529 4 , 0.529 5 , 0.95 6 , 0.95 7 , 0.95 8 , 0.95 9 , 0.95 10 , 0.987 11 , 0.987 12 , 0.987 13 , 0.987 School contact matrix specifying the number/weight of contacts by age bin. This is similar to the household contact matrix. For example: 0 - 10 , 10 - 20 , 20 - 30 0 - 10 0.659867911 , 0.503965302 , 0.214772978 10 - 20 0.314776879 , 0.895460015 , 0.412465791 20 - 30 0.132821425 , 0.405073038 , 1.433888594 Employment rates by age , which is used when determining who is in the labor force, and thus which adults are available to be chosen as teachers: Age , Percent 16 , 0.496 17 , 0.496 18 , 0.496 19 , 0.496 20 , 0.838 21 , 0.838 22 , 0.838 Student teacher ratio , which is the average ratio for the location. Methods to use a distribution or vary the ratio for different types of schools may come in later developments of the model: student_teacher_ratio = 30 Typically, contact matrices describing age-specific mixing patterns in schools include the interactions between students and their teachers. These patterns describe multiple types of schools, from possibly preschools to universities. Workflow \u00b6 Use these SynthPops functions to implement the school contact layer as follows: get_uids_in_school() uses the enrollment rates to determine which people attend school. This then provides the number of students needing to be assigned to schools. generate_school_sizes() generates schools according to the school size distribution until there are enough places for every student to be assigned a school. send_students_to_school() assigns specific students to specific schools. This function is similar to households in that a reference student is selected, and then the contact matrix is used to fill the remaining spots in the school. Some particulars in this function deal with ensuring a teacher/adult is less likely to be selected as a reference person, and restricting the age range of sampled people relative to the reference person so that a primary school age reference person will result in the rest of the school being populated with other primary school age children get_uids_potential_workers() selects teachers by first getting a pool of working age people that are not students. get_workers_by_age_to_assign() further filters this population by employment rates resulting in a collection of people that need to be assigned workplaces. In assign_teachers_to_work() , for each school, work out how many teachers are needed according to the number of students and the student-teacher ratio, and sample those teachers from the pool of adult workers. A minimum and maximum age for teachers can be provided to select teachers from a specified range of ages (this can be used to account for the additional years of education needed to become a teacher in many places)."}, {"title": "Search results \u2014 SynthPops  documentation", "tags": "", "url": "./search-local.html", "text": "Search results \u00b6"}, {"title": "Search \u2014 SynthPops  documentation", "tags": "", "url": "./search.html", "text": "Please activate JavaScript to enable the search functionality."}, {"title": "Using SynthPops \u2014 SynthPops  documentation", "tags": "", "url": "./usage.html", "text": "Using SynthPops \u00b6 The overall SynthPops workflow is contained in generate_synthetic_population() and is described below. The population is generated through households, not a pool of people. You can provide required data to SynthPops in a variety of formats including .csv, .txt, or Microsoft Excel (.xlsx). Instantiate a collection of households with sizes drawn from census data. Populations cannot be created outside of the household contact layer . For each household, sample the age of a \u201creference\u201d person from data that maps household size to a reference person in those households. The reference person may be referred to as the head of the household, a parent in the household, or some other definition specific to the data being used. If no data mapping household size to ages of reference individuals are available, then the age of the reference person is sampled from the age distribution of adults for the location. The age bin of the reference people identifies the row of the contact matrix for that location. The remaining household members are then selected by sampling an age for the distribution of contacts for the reference person\u2019s age (in other words, normalizing the values of the row and sampling for a column) and assigning someone with that age to the household. As households are generated, individuals are given IDs. After households are constructed, students are chosen according to enrollment data by age to generate the school contact layer . Students are assigned to schools using a similar method as above, where we select the age of a reference person and then select their contacts in school from an age-specific contact matrix for the school setting and data on school sizes. With all students assigned to schools, teachers are selected from the labor force according to employment data. The rest of the labor force are assigned to workplaces in the workplace contact layer by selecting a reference person and their contacts using an age-specific contact matrix and data on workplace sizes. Examples \u00b6 Examples live in the examples folder. These can be run as follows: python examples/make_generic_contacts.py Creates a dictionary of individuals, each of whom are represented by another dictionary with their contacts contained in the contacts key. Contacts are selected at random with degree distribution following the Erdos-Renyi graph model. python examples/generate_contact_network_with_microstructure.py Creates and saves to file households, schools, and workplaces of individuals with unique IDs, and a table mapping IDs to ages. Two versions of each contact layer (households, schools, or workplaces) are saved; one with the unique IDs of each individual in each group (a single household, school or workplace), and one with their ages (for easy viewing of the age mixing patterns created). python examples/load_contacts_and_show_some_layers.py Loads a multilayer contact network made of three layers and shows the age and ages of contacts for the first 20 people. In the tests folder, you can view the following to see examples of additional functionality. test_synthpop.py Reads in demographic data and generates populations matching those demographics. test_contacts.py Generates random contact networks with individuals matching demographic data or reads in synthetic contact networks with three layers (households, schools, and workplaces). test_contact_network_generation.py Generates synthetic contact networks in households, schools, and workplaces with Seattle Metro data (and writes to file). The other topics in this section walk through the specific data sources and details about the settings for each of the contact layers . Household contact layer Data needed Workflow School contact layer Data needed Workflow Workplace contact layer Data required Workflow"}, {"title": "Workplace contact layer \u2014 SynthPops  documentation", "tags": "", "url": "./workplaces.html", "text": "Workplace contact layer \u00b6 The workplace contact layer represents all of the pairwise connections between people in workplaces, except for teachers working in schools. After some workers are assigned to the school contact layer as teachers, all remaining workers are assigned to workplaces. Workplaces are special in that there is little/no age structure so workers of all ages may be present in every workplace. Again, note that work and school are currently exclusive, because the people attending schools are removed from the list of eligible workers. This doesn\u2019t necessarily need to be the case though. In fact, we know that in any countries and cultures around the world, people take on multiple roles as both students and workers, either part-time or full-time in one or both activities. Data required \u00b6 The following data are required for generating the workplace contact layer: Workplace size distribution - again, this gets normalized so can be specified as absolute counts or as normalized values: work_size_bracket , size_count 1 - 4 , 2947 5 - 9 , 992 10 - 19 , 639 20 - 49 , 430 50 - 99 , 140 100 - 249 , 83 250 - 499 , 26 500 - 999 , 13 1000 - 1999 , 12 Work contact matrix specifying the number/weight of contacts by age bin. This is similar to the household contact matrix. For example: 20 - 30 , 30 - 40 , 40 - 50 20 - 30 0.659867911 , 0.503965302 , 0.214772978 30 - 40 0.314776879 , 0.895460015 , 0.412465791 40 - 50 0.132821425 , 0.405073038 , 1.433888594 Workflow \u00b6 generate_workplace_sizes() generates workplace sizes according to the workplace size distribution until the number of workers is reached. assign_rest_of_workers() populates workplaces just like for households and schools: randomly selecting the age of a reference person, and then sampling the rest of the workplace using the contact matrix."}]};
